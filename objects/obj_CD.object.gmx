<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-9998</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>spinIndex = 0;
vDashIndex = 0;
hDashIndex = 0;
PHIndex = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Visual
if configCDbar = 0 {

    xPosBar = view_xview[view_current] + 2;
    yPosBar = view_yview[view_current] + view_hview[view_current] - 2;
    
    spinIndex = (playerSpinCD*(sprite_get_number(spr_spin_CD)-1))/SpinCD;
    draw_sprite(spr_spin_CD,spinIndex,xPosBar+18,yPosBar-1);
    
    vDashIndex = (playerVertical_dashCD*(sprite_get_number(spr_vdash_CD)-1))/VerticalDashCD;
    draw_sprite(spr_vdash_CD,vDashIndex,xPosBar+38,yPosBar-1);
    
    hDashIndex = (playerHorizontal_dashCD*(sprite_get_number(spr_hdash_CD)-1))/HorizontalDashCD;
    draw_sprite(spr_hdash_CD,hDashIndex,xPosBar+58,yPosBar-1);
        
    draw_set_color(c_white);
    draw_set_font(fnt_default9);
    draw_set_halign(fa_center);
    draw_set_valign(fa_center);
    draw_text(xPosBar+7.5,yPosBar-10,string(playerPH));
    draw_set_valign(fa_bottom);

    draw_sprite(spr_PH_inCDbar,PHIndex,xPosBar+1,yPosBar-1);
    if playerPH &gt; 0 &amp;&amp; PHIndex &lt; sprite_get_number(spr_PH_inCDbar)-1 {
        PHIndex += 0.1;
    }
    if playerPH &lt;= 0 &amp;&amp; PHIndex &gt; 0 {
        if PHIndex &lt; 0.5 {
            PHIndex = 0;
        } else {
            PHIndex -= 0.1;
        }
    }
    
    draw_sprite(spr_base_CD,0,xPosBar,yPosBar);
    
    
        
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Tech
if configCDbar = 1 {

    xPosBar = view_xview[view_current] + 2;
    yPosBar = view_yview[view_current] + view_hview[view_current] - 2;
    
    spinIndex = (playerSpinCD*(sprite_get_number(spr_spin_CD_tech)-1))/SpinCD;
    draw_sprite(spr_spin_CD_tech,spinIndex,xPosBar+18,yPosBar-1);
    
    vDashIndex = (playerVertical_dashCD*(sprite_get_number(spr_vdash_CD_tech)-1))/VerticalDashCD;
    draw_sprite(spr_vdash_CD_tech,vDashIndex,xPosBar+38,yPosBar-1);
    
    hDashIndex = (playerHorizontal_dashCD*(sprite_get_number(spr_hdash_CD_tech)-1))/HorizontalDashCD;
    draw_sprite(spr_hdash_CD_tech,hDashIndex,xPosBar+58,yPosBar-1);
        
    draw_set_color(c_white);
    draw_set_font(fnt_default9);
    draw_set_halign(fa_center);
    draw_set_valign(fa_center);
    draw_text(xPosBar+7.5,yPosBar-10,string(playerPH));
    draw_set_valign(fa_bottom);

    draw_sprite(spr_PH_inCDbar,PHIndex,xPosBar+1,yPosBar-1);
    if playerPH &gt; 0 &amp;&amp; PHIndex &lt; sprite_get_number(spr_PH_inCDbar)-1 {
        PHIndex += 0.1;
    }
    if playerPH &lt;= 0 &amp;&amp; PHIndex &gt; 0 {
        if PHIndex &lt; 0.5 {
            PHIndex = 0;
        } else {
            PHIndex -= 0.1;
        }
    }
    
    draw_set_color(c_white);
    draw_set_font(fnt_default6);
    draw_set_halign(fa_right);
    draw_set_valign(fa_bottom);
    if playerSpinCD &gt; 0 { 
        draw_text(xPosBar+34,yPosBar-1,string(ceil(playerSpinCD))); }
    if playerVertical_dashCD &gt; 0 { 
        draw_text(xPosBar+54,yPosBar-1,string(ceil(playerVertical_dashCD))); }
    if playerHorizontal_dashCD &gt; 0{ 
        draw_text(xPosBar+74,yPosBar-1,string(ceil(playerHorizontal_dashCD))); }
    
    draw_set_valign(fa_bottom);   
    draw_set_halign(fa_left);    
    
    draw_sprite(spr_base_CD,0,xPosBar,yPosBar);
    
    
        
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
