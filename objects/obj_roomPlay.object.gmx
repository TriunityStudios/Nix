<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>s = 0;
loadGame = 0;
newGame = 0;
startNewGame = 0;
globalvar saveNum; global.saveNum = 0;
error = 0;
timingError = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Load Game
if loadGame = 1 {
    if (file_exists("Save.sav"))
    {
        ini_open("Save.sav");
        global.playerMaxHeal = ini_read_real("Combat","playerMaxHeal",50);
        global.playerNoBattle = ini_read_real("Combat","playerNoBattle",5);
        global.regenHPs = ini_read_real("Combat","regenHPs",1); 
        global.accelerationRegenHP = ini_read_real("Combat","accelerationRegenHP",0.0005);
        
        global.playerStamina = ini_read_real("Combat","playerStamina",0);
        global.playerMaxStamina = ini_read_real("Combat","playerMaxStamina",100);
        global.regenSTs = ini_read_real("Combat","regenSTs",30);
        global.accelerationRegenST = ini_read_real("Combat","accelerationRegenST",0.0005); 
        
        global.playerEXP = ini_read_real("Combat","playerEXP",0);
        global.playerEXPnextLvL = ini_read_real("Combat","playerEXPnextLvL",10);
        global.playerLvL = ini_read_real("Combat","playerLvL",1);
        global.playerEXPaddNewLvL = ini_read_real("Combat","playerEXPaddNewLvL",20);
        global.playerPH = ini_read_real("Combat","playerPH",0);
        global.animationNextLvL = ini_read_real("Combat","animationNextLvL",0);
        
        global.playerAD = ini_read_real("Combat","playerAD",1);
        global.playerPenArm = ini_read_real("Combat","playerPenArm",1);
        global.playerTrueAD = ini_read_real("Combat","playerTrueAD",1);
        global.playerAP = ini_read_real("Combat","playerAP",1);
        global.playerPenAP = ini_read_real("Combat","playerPenAP",1)
        global.playerTrueAP = ini_read_real("Combat","playerTrueAP",1);
        global.playerCritickProbability = ini_read_real("Combat","playerCritickProbability",30);
        global.playerCritickDamage = ini_read_real("Combat","playerCritickDamage",10);
        
        global.playerArmour = ini_read_real("Combat","playerArmour",1);
        global.playerResAP = ini_read_real("Combat","playerResAP",1);
        
        global.resKnockback = ini_read_real("Combat","resKnockback",1);
        
        
            // Basic attack 
        global.playerBasicAttack = ini_read_real("Combat","playerBasicAttack",0);
        global.BasicAttackCD = ini_read_real("Combat","BasicAttackCD",1);
        global.playerBasicAttackCD = ini_read_real("Combat","playerBasicAttackCD",0);
        global.staminaBasicAttack = ini_read_real("Combat","staminaBasicAttack",10);
        
        global.playerADBasicAttack = ini_read_real("Combat","playerADBasicAttack",1);
        global.playerPenArmBasicAttack = ini_read_real("Combat","playerPenArmBasicAttack",1);
        global.playerTrueADBasicAttack = ini_read_real("Combat","playerTrueADBasicAttack",1);
        global.playerAPBasicAttack = ini_read_real("Combat","playerAPBasicAttack",1);
        global.playerPenAPBasicAttack = ini_read_real("Combat","playerPenAPBasicAttack",1);
        global.playerTrueAPBasicAttack = ini_read_real("Combat","playerTrueAPBasicAttack",1);
        global.playerCritickProbabilityBasicAttack = ini_read_real("Combat","playerCritickProbabilityBasicAttack",1);
        global.playerCritickDamageBasicAttack = ini_read_real("Combat","playerCritickDamageBasicAttack",1);
        
            // Spin
        global.playerSpin = ini_read_real("Combat","playerSpin",0);
        global.SpinCD = ini_read_real("Combat","SpinCD",1);
        global.playerSpinCD = ini_read_real("Combat","playerSpinCD",0);
        global.staminaSpin = ini_read_real("Combat","staminaSpin",30);
        global.LongSpin = ini_read_real("Combat","LongSpin",1);
        global.everSpinHitTime = ini_read_real("Combat","everSpinHitTime",0.2);
        
        global.playerADSpin = ini_read_real("Combat","playerADSpin",1);
        global.playerPenArmSpin = ini_read_real("Combat","playerPenArmSpin",1);
        global.playerTrueADSpin = ini_read_real("Combat","playerTrueADSpin",1);
        global.playerAPSpin = ini_read_real("Combat","playerAPSpin",1);
        global.playerPenAPSpin = ini_read_real("Combat","playerPenAPSpin",1);
        global.playerTrueAPSpin = ini_read_real("Combat","playerTrueAPSpin",1);
        global.playerCritickProbabilitySpin = ini_read_real("Combat","playerCritickProbabilitySpin",1);
        global.playerCritickDamageSpin = ini_read_real("Combat","playerCritickDamageSpin",1);
        
            // Vertical Dash
        global.playerCollisionVDash = ini_read_real("Combat","playerCollisionVDash",0);
        global.playerVDashON = ini_read_real("Combat","playerVDashON",0);
        global.VerticalDashCD = ini_read_real("Combat","VerticalDashCD",2);
        global.vspVerticalDash = ini_read_real("Combat","vspVerticalDash",0.1);
        global.playerVertical_dashCD = ini_read_real("Combat","playerVertical_dashCD",0);
        global.staminaVDash = ini_read_real("Combat","staminaVDash",15);
        
        global.playerADVDash = ini_read_real("Combat","playerADVDash",1);
        global.playerPenArmVDash = ini_read_real("Combat","playerPenArmVDash",1);
        global.playerTrueADVDash = ini_read_real("Combat","playerTrueADVDash",1);
        global.playerAPVDash = ini_read_real("Combat","playerAPVDash",1);
        global.playerPenAPVDash = ini_read_real("Combat","playerPenAPVDash",1);
        global.playerTrueAPVDash = ini_read_real("Combat","playerTrueAPVDash",1);
        global.playerCritickProbabilityVDash = ini_read_real("Combat","playerCritickProbabilityVDash",1);
        global.playerCritickDamageVDash = ini_read_real("Combat","playerCritickDamageVDash",1);
        
            // Horizontal Dash (-45, 0, +45)
        global.playerHorizontal_dash = ini_read_real("Combat","playerHorizontal_dash",0);
        global.HorizontalDashCD = ini_read_real("Combat","HorizontalDashCD",3);
        global.playerHorizontal_dashCD = ini_read_real("Combat","playerHorizontal_dashCD",0);
        global.staminaHDash = ini_read_real("Combat","staminaHDash",20);
        
        global.playerADHDash = ini_read_real("Combat","playerADHDash",1);
        global.playerPenArmHDash = ini_read_real("Combat","playerPenArmHDash",1);
        global.playerTrueADHDash = ini_read_real("Combat","playerTrueADHDash",1);
        global.playerAPHDash = ini_read_real("Combat","playerAPHDash",1);
        global.playerPenAPHDash = ini_read_real("Combat","playerPenAPHDash",1);
        global.playerTrueAPHDash = ini_read_real("Combat","playerTrueAPHDash",1);
        global.playerCritickProbabilityHDash = ini_read_real("Combat","playerCritickProbabilityHDash",1); 
        global.playerCritickDamageHDash = ini_read_real("Combat","playerCritickDamageHDash",1);
            



        ini_close();
        room_goto(room1);
    } else {
        //do nothing
    }
}

        /*
        //Load game
        var/global variable = = ini_read_real/ini_read_string("Section","saveName",defaultValue);
        */
        
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///New Game
if newGame = 1 {
    room_goto(room_chooseWhereSave);
}
/*if newGame = 1 {
    ///Combat system

    if (!file_exists("Save1.sav")) {
        global.saveNum = 1;
        startNewGame = 1;
    } else {
        if (!file_exists("Save2.sav")) {
        global.saveNum = 2;
        startNewGame = 1
        } else {
            if (!file_exists("Save3.sav")) {
                global.saveNum = 3;
                startNewGame = 1
            } else {
                room_goto(room_chooseWhereSave);
            }
        }
    }
    
}



if startNewGame = 1 {
    //Profile
        globalvar NameProfile global.NameProfile = "NameProfile";
        globalvar configStatsBar global.configStatsBar = 1;
        globalvar configStatsInfo global.configStatsInfo = 1;
        globalvar configCDbar global.configCDbar = 1;    
        
    //Progress
        globalvar worlds global.worlds = 1;
        globalvar lvlMap1 global.lvlMap1 = 1;
        globalvar lvlMap2 global.lvlMap2 = 0;
        globalvar lvlMap3 global.lvlMap3 = 0;
        globalvar lvlMap4 global.lvlMap4 = 0;
        globalvar lvlMap5 global.lvlMap5 = 0;
        globalvar lvlMap6 global.lvlMap6 = 0;
        globalvar hPlayed global.hPlayed = 0;
        globalvar mPlayed global.mPlayed = 0;
        globalvar sPlayed global.sPlayed = 0;
        globalvar progress global.progress = 0;
    
    //Stats
        //Heal
        globalvar playerMaxHeal global.playerMaxHeal = 50;
        globalvar regenHPs global.regenHPs = 120; 
    
        //Stamina
        globalvar playerMaxStamina global.playerMaxStamina = 100;
        globalvar regenSTs global.regenSTs = 30;
        
        //Exp
        globalvar playerEXP global.playerEXP = 0;
        globalvar playerEXPnextLvL global.playerEXPnextLvL = 10;
        globalvar playerLvL global.playerLvL = 1;
        globalvar playerPH global.playerPH = 0;
        
        //Basic
        globalvar playerAD global.playerAD = 1;
        globalvar playerPenArm global.playerPenArm = 1;
        globalvar playerTrueAD global.playerTrueAD = 1;
        globalvar playerAP global.playerAP = 1;
        globalvar playerPenAP global.playerPenAP = 1
        globalvar playerTrueAP global.playerTrueAP = 1;
        globalvar playerCritickProbability global.playerCritickProbability = 30;
        globalvar playerCritickDamage global.playerCritickDamage = 10;
        globalvar playerArmour global.playerArmour = 1;
        globalvar playerResAP global.playerResAP = 1;
        globalvar resKnockback global.resKnockback = 1;
        
        
        // Basic attack 
        globalvar BasicAttackCD global.BasicAttackCD = 1;
        globalvar staminaBasicAttack global.staminaBasicAttack = 10;
        
        globalvar playerADBasicAttack global.playerADBasicAttack = 1;
        globalvar playerPenArmBasicAttack global.playerPenArmBasicAttack = 1;
        globalvar playerTrueADBasicAttack global.playerTrueADBasicAttack = 1;
        globalvar playerAPBasicAttack global.playerAPBasicAttack = 1;
        globalvar playerPenAPBasicAttack global.playerPenAPBasicAttack = 1;
        globalvar playerTrueAPBasicAttack global.playerTrueAPBasicAttack = 1;
        globalvar playerCritickProbabilityBasicAttack global.playerCritickProbabilityBasicAttack = 1;
        globalvar playerCritickDamageBasicAttack global.playerCritickDamageBasicAttack = 1;
        
        // Spin
        globalvar SpinCD global.SpinCD = 1;
        globalvar staminaSpin global.staminaSpin = 30;
        
        globalvar playerADSpin global.playerADSpin = 1;
        globalvar playerPenArmSpin global.playerPenArmSpin = 1;
        globalvar playerTrueADSpin global.playerTrueADSpin = 1;
        globalvar playerAPSpin global.playerAPSpin = 1;
        globalvar playerPenAPSpin global.playerPenAPSpin = 1;
        globalvar playerTrueAPSpin global.playerTrueAPSpin = 1;
        globalvar playerCritickProbabilitySpin global.playerCritickProbabilitySpin = 1;
        globalvar playerCritickDamageSpin global.playerCritickDamageSpin = 1;
        
        // Vertical Dash
        globalvar VerticalDashCD global.VerticalDashCD = 2;
        globalvar staminaVDash global.staminaVDash = 15;
        
        globalvar playerADVDash global.playerADVDash = 1;
        globalvar playerPenArmVDash global.playerPenArmVDash = 1;
        globalvar playerTrueADVDash global.playerTrueADVDash = 1;
        globalvar playerAPVDash global.playerAPVDash = 1;
        globalvar playerPenAPVDash global.playerPenAPVDash = 1;
        globalvar playerTrueAPVDash global.playerTrueAPVDash = 1;
        globalvar playerCritickProbabilityVDash global.playerCritickProbabilityVDash = 1;
        globalvar playerCritickDamageVDash global.playerCritickDamageVDash = 1;
        
        // Horizontal Dash (-45, 0, +45)
        globalvar HorizontalDashCD global.HorizontalDashCD = 3;
        globalvar staminaHDash global.staminaHDash = 20;
        
        globalvar playerADHDash global.playerADHDash = 1;
        globalvar playerPenArmHDash global.playerPenArmHDash = 1;
        globalvar playerTrueADHDash global.playerTrueADHDash = 1;
        globalvar playerAPHDash global.playerAPHDash = 1;
        globalvar playerPenAPHDash global.playerPenAPHDash  = 1;
        globalvar playerTrueAPHDash global.playerTrueAPHDash = 1;
        globalvar playerCritickProbabilityHDash global.playerCritickProbabilityHDash = 1; 
        globalvar playerCritickDamageHDash global.playerCritickDamageHDash = 1;
    
    startNewGame = 0;
    room_goto(room_chooseWhereSave);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Back with ESC
if keyboard_check_pressed(vk_escape) { room_goto(room_menu); }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x= view_wview/2
y= view_hview/2


if (s &lt; 2) &amp;&amp; (keyboard_check_pressed(vk_down)) {
    s += 1;
}

if (s &gt; 0) &amp;&amp; (keyboard_check_pressed(vk_up)) {
    s -= 1;
}

if (s = 0) &amp;&amp; (keyboard_check_pressed(vk_enter)) {
    room_goto(room_saves);
}

if (s = 1) &amp;&amp; (keyboard_check_pressed(vk_enter)) {
    newGame = 1
}

if (s = 2) &amp;&amp; (keyboard_check_pressed(vk_enter)) {
    room_goto(room_menu);
}

draw_set_color(c_black);
draw_set_font(fnt_default50);
draw_set_halign(fa_center);
draw_set_valign(fa_center);

if s = 0 {
    draw_set_alpha(1);
    draw_text(x,y+50*-1,"&gt; CONTINUE &lt;");
    draw_set_alpha(0.7);
    draw_text(x,y+50*0,"NEW");
    draw_text(x,y+50*1,"Go Back");
}

if s = 1 {
    draw_set_alpha(0.7);
    draw_text(x,y+50*-1,"CONTINUE");
    draw_set_alpha(1);
    draw_text(x,y+50*0,"&gt; NEW &lt;");
    draw_set_alpha(0.7);
    draw_text(x,y+50*1,"Go Back");
}

if s = 2 {
    draw_set_alpha(0.7);
    draw_text(x,y+50*-1,"CONTINUE");
    draw_text(x,y+50*0,"NEW");
    draw_set_alpha(1);
    draw_text(x,y+50*1,"&gt; Go Back &lt;");
}

draw_set_valign(fa_top);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Error
if error = 1 {
    timingError = 0.5;
}

if timingError &gt; 0 { 
    timingError -= 1/120;

    draw_set_alpha(1);
    draw_set_colour(c_maroon);
    draw_set_font(fnt_default_24);    
    draw_set_halign(fa_center);
    draw_text(view_wview/2,300,"All the save files are full");
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
