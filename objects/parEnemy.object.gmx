<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_e_soldierR</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>grid= 32;

/// Customize ///

//distance from spawn point in Patrol
lB = grid*2 ;
rB = grid*1.5;

//Speed
dSpeed = 1;

//jump speed 
leap = 8;

//weight
grav= 0.5;

//Reaction Time when following player
rL = 25; //range low
rH = 30; //range high

//Initial Direction  0 = left; 1 = right
eneDir = 1;


//////////////////////////
//movement
hsp = 0;
vsp = 0;
grounded = true;
eneJump = false ;
eneSpeed = dSpeed;

//Distance from spawn point
spawnPoint = x ;
leftBound = x - lB;
rightBound = x + rB;

//States
patrol = true;
follow = false;
checkPos = true;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>checkPos = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>eneJump = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//left
 if eneDir = 0  { 
      hsp = -eneSpeed ;
      image_xscale = -1 ;
 }
 
//right
 if eneDir = 1  {
      hsp = eneSpeed ;
      image_xscale = 1 ;
 }

//gravity
vsp += grav;

//vertical Collision / landing
if place_meeting(x,y+vsp,obj_solid) {
    while !place_meeting(x,y+1,obj_solid) y += 1 ;
    vsp = 0 ;
    grounded = true ;
} else {
    grounded = false }

// jump
if eneJump &amp;&amp; grounded { vsp = -leap }

//Jump &amp; horizontal collision
if place_meeting(x+hsp,y,obj_solid) {
    eneJump = true; 
    alarm[0] = 5;
    while !place_meeting(x+sign(hsp),y,obj_solid) x += sign(hsp);
    hsp = 0 ;
}

// turn around at tall object
if eneDir = 0 &amp;&amp; place_meeting(x-8,y,obj_solid) &amp;&amp; place_meeting(x-8,y-grid,obj_solid) { eneDir = 1 }
if eneDir = 1 &amp;&amp; place_meeting(x+8,y,obj_solid) &amp;&amp; place_meeting(x+8,y-grid,obj_solid) { eneDir = 0 }

//Patrol
if patrol { 
    eneSpeed = dSpeed
    if x &lt; leftBound  { eneDir = 1 }
    if x &gt; rightBound { eneDir = 0 }
}

//Sight
blocked = collision_line(x,y,obj_player.x,obj_player.y,obj_solid,0,1)

// movement in relation to the player
if eneDir == 0 &amp;&amp; obj_player.x &lt; x { towards = true } 
if eneDir == 0 &amp;&amp; obj_player.x &gt; x { towards = false } 
if eneDir == 1 &amp;&amp; obj_player.x &gt; x { towards = true } 
if eneDir == 1 &amp;&amp; obj_player.x &lt; x { towards = false } 

//is player visible
if blocked &lt; 0 &amp;&amp; towards { 
    patrol = false ;
    follow = true ;
}

if blocked &gt; 0  { 
    follow = false; 
    patrol = true ;
}

//Follow
if follow {
    eneSpeed = dSpeed * 2
    //reaction time
    if checkPos {
        if obj_player.x &lt; x + grid { eneDir = 0 }
        if obj_player.x &gt; x - grid { eneDir = 1 }
       checkPos = false;
       alarm[1] = random_range(rL,rH);
    }
}



//input movement
x += hsp ;
y += vsp ; 

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>8,22</point>
    <point>11,11</point>
  </PhysicsShapePoints>
</object>
