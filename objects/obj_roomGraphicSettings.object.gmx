<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-99</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>h = 0;
w0 = -1;
if window_get_fullscreen() { w1 = 1} else { w1 = 0 }

reh1 = 1;

showPanelOk = 0;
saveConfig = 0;
sResConfigDef = 15;

toCenter = 0;
timingToCenter = 0; 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Center Screen    
    if toCenter = 1 {
        timingToCenter += 1/room_speed;
        if timingToCenter &gt;= (1/(room_speed-10)) {
            window_center();
            timingToCenter = 0;
            toCenter = 0;
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Return to the menu with ESC
if showPanelOk = 0 {
    if keyboard_check_pressed(vk_escape) { room_goto(room_menu); }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Press F3 to view all info
x= view_xview[view_current] + (view_wview[0]/2);
y= view_yview[view_current] + (15);

if showPanelOk = 0 {
    draw_set_alpha(0.7);
    draw_set_color(c_gray);
    draw_set_font(fnt_default9);
    draw_set_halign(fa_center);
    
    draw_set_font(fnt_default12);
    draw_text(x,y,"Press F3 to view all the information #(In-game included)");
    
    draw_set_alpha(1);    
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Options Menu
x= view_wview/2
y= view_hview/2

if showPanelOk = 0 {
    if (h &lt; 3) &amp;&amp; (keyboard_check_pressed(vk_down)) { h += 1; }
    if (h &gt; 0) &amp;&amp; (keyboard_check_pressed(vk_up)) { h -= 1; }
    if (h = 0) &amp;&amp; (w0 &lt; 3) &amp;&amp; (w1 = 0) &amp;&amp; (keyboard_check_pressed(vk_right)) { w0 += 1; }
    if (h = 0) &amp;&amp; (w0 &gt; -1) &amp;&amp; (w1 = 0) &amp;&amp; (keyboard_check_pressed(vk_left)) { w0 -= 1; }
    if (h = 1) &amp;&amp; (w1 &lt; 1) &amp;&amp; (keyboard_check_pressed(vk_right)) { w1 += 1; }
    if (h = 1) &amp;&amp; (w1 &gt; 0) &amp;&amp; (keyboard_check_pressed(vk_left)) { w1 -= 1; }
    if (h = 1) &amp;&amp; (w1 = 0) &amp;&amp; (keyboard_check_pressed(vk_enter)) &amp;&amp; (reh1 = 1) { w1 = 1; reh1 = 0; }
    if (h = 1) &amp;&amp; (keyboard_check_released(vk_enter)) &amp;&amp; (reh1 = 0) { reh1 = 1; }
    if (h = 1) &amp;&amp; (w1 = 1) &amp;&amp; (keyboard_check_pressed(vk_enter)) &amp;&amp; (reh1 = 1) { w1 = 0; reh1 = 0; }
    
    if h = 0 { alphah0 = 1 } else { alphah0 = 0.7 }
    if h = 1 { alphah1 = 1 } else { alphah1 = 0.7 }
    if h = 2 { alphah2 = 1 } else { alphah2 = 0.7 }
    if h = 3 { alphah3 = 1 } else { alphah3 = 0.7 }
    
    if (h = 2) &amp;&amp; (keyboard_check_pressed(vk_enter)) {
        if w0 = 0 { window_set_size(window_get_width(), window_get_height()) }
        if w0 = 0 { window_set_size(1920, 1080); wdisplay = 1920; hdisplay = 1080;}
        if w0 = 1 { window_set_size(1280, 720); wdisplay = 1280; hdisplay = 720;}
        if w0 = 2 { window_set_size(960, 540); wdisplay = 960; hdisplay = 540;}
        if w0 = 3 { window_set_size(640, 360); wdisplay = 640; hdisplay = 360;}
        if w1 = 0 { window_set_fullscreen(false); toCenter = 1; } else {window_set_fullscreen(true) }
        showPanelOk = 1;
    }
    if (h = 3) &amp;&amp; (keyboard_check_pressed(vk_enter)) {
        room_goto(room_menu);
    }
    
    draw_set_color(c_black);
    draw_set_font(fnt_default12);
    draw_set_halign(fa_center);
    draw_set_valign(fa_center);
    
    if w1 = 1{
        draw_set_alpha(0.7);
        draw_text(x,y-15*2,"ATUTOMATIC#-------------------------------");
    }
    
    if h = 0 &amp;&amp; w0 = -1 {
        draw_set_alpha(alphah0);
        draw_text(x,y+20*-1,string(window_get_width()) + " x " + string(window_get_height()) + " (current)");
    } else {
        if w0 = -1 {
            draw_set_alpha(alphah0);
            draw_text(x,y+20*-1,string(window_get_width()) + " x " + string(window_get_height()) + " (current)");     
        }
    }
    
    if h = 0 &amp;&amp; w0 = 0 &amp;&amp; w1 = 0{
        draw_set_alpha(alphah0);
        draw_text(x,y+20*-1,"1920 x 1080 (16:9)");
    } else {
        if w0 = 0 {
            draw_set_alpha(alphah0);
            draw_text(x,y+20*-1,"1920 x 1080 (16:9)");        
        }
    }
    
    if h = 0 &amp;&amp; w0 = 1 &amp;&amp; w1 = 0{
        draw_set_alpha(alphah0);
        draw_text(x,y+20*-1,"1280 x 720 (16:9)");
    } else {
        if w0 = 1 {
            draw_set_alpha(alphah0);
            draw_text(x,y+20*-1,"1280 x 720 (16:9)");        
        }
    }
    
    if h = 0 &amp;&amp; w0 = 2 &amp;&amp; w1 = 0{
        draw_set_alpha(alphah0);
        draw_text(x,y+20*-1,"960 x 540 (16:9)");
    } else {
        if w0 = 2 {
            draw_set_alpha(alphah0);
            draw_text(x,y+20*-1,"960 x 540 (16:9)");        
        }
    }
    
    if h = 0 &amp;&amp; w0 = 3 &amp;&amp; w1 = 0{
        draw_set_alpha(alphah0);
        draw_text(x,y+20*-1,"640 x 320 (16:9)");
    } else {
        if w0 = 3 {
            draw_set_alpha(alphah0);
            draw_text(x,y+20*-1,"640 x 320 (16:9)");        
        }
    }
    
    if h = 1 &amp;&amp; w1 = 0{
        draw_set_alpha(alphah1);
        draw_text(x,y+20*0,"FULLSCREEN OFF");
    } else {
        if w1 = 0 {
            draw_set_alpha(alphah1);
            draw_text(x,y+20*0,"FULLSCREEN OFF");
        }
    }
    
    if h = 1 &amp;&amp; w1 = 1{
        draw_set_alpha(alphah1);
        draw_text(x,y+20*0,"FULLSCREEN ON");
    } else {
        if w1 = 1 {
            draw_set_alpha(alphah1);
            draw_text(x,y+20*0,"FULLSCREEN ON");
        }
    }
    
    if h = 2 {
        draw_set_alpha(alphah2);
        draw_text(x,y+39,"APPLY");
    } else {
        draw_set_alpha(alphah2);
        draw_text(x,y+20*2,"APPLY");
    }
    
    if h = 3 {
        draw_set_alpha(alphah3);
        draw_text(x,y+59,"QUIT");
    } else {
        draw_set_alpha(alphah3);
        draw_text(x,y+20*3,"QUIT");
    }
    
    draw_set_valign(fa_top);
    
} else {

    draw_set_color(c_maroon);
    draw_set_font(fnt_default12);
    draw_set_halign(fa_center);
    draw_set_valign(fa_center);
    draw_text(x,y,"Are the settings correct? #Yes (enter)   No(esc)#Configuration will be restarted in: " + string(round(sResConfigDef)) + " seconds")
    sResConfigDef -= 1/room_speed;
    if keyboard_check_pressed(vk_enter) {
     
        if window_get_fullscreen() { fullscreen = 1} else { fullscreen = 0 }
        //if saveConfig = 1 {
        if (file_exists("Config.sav")) file_delete("Config.sav");
        ini_open("Config.sav");
            ini_write_real("Screen Configuration","Resolution W",wdisplay);
            ini_write_real("Screen Configuration","Resolution H",hdisplay);
            ini_write_real("Screen Configuration","fullscreen",fullscreen);
        ini_close();
        saveConfig = 0;
        //}
        showPanelOk = 0 
    }
    
    if (keyboard_check_pressed(vk_escape)) || (sResConfigDef &lt;= 0) { 
        if (file_exists("Config.sav")) {
        
            ini_open("Config.sav")
                global.fullscreen = ini_read_real("Screen Configuration","fullscreen",0)
                global.wdisplay = ini_read_real("Screen Configuration","Resolution W",16)
                global.hdisplay = ini_read_real("Screen Configuration","Resolution H",9)
            ini_close();
            
            window_set_size(wdisplay,hdisplay)
            if fullscreen = 0 { window_set_fullscreen(false) } else { window_set_fullscreen(true) }
        
        } else {
            window_set_size( display_get_width(), display_get_height() );
            globalvar wdisplay; wdisplay = display_get_width();
            globalvar hdisplay; hdisplay = display_get_height();
        }        
        toCenter = 1;
        showPanelOk = 0 
    }
    keyboard_clear(vk_enter)keyboard_clear(vk_escape)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
