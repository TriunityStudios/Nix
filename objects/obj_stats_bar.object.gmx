<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-9998</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//To change
totalTimesAnimation = 3;

//Not to change
indexAnimLvL = 0;
timesAnimation = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Tech
if configStatsBar = 1 {

    xPosBar = view_xview[view_current] + 2;
    yPosBar = view_yview[view_current] + 2;
    
    hpIndex = (playerHeal*(sprite_get_number(spr_hp_bar_big)-1))/playerMaxHeal;
    draw_sprite(spr_hp_bar_big,hpIndex,xPosBar+19,yPosBar+2);
    
    xpIndex = (playerEXP*(sprite_get_number(spr_xp_bar_big)-1))/playerEXPnextLvL;
    draw_sprite(spr_xp_bar_big,xpIndex,xPosBar+20,yPosBar+10);
    
    stIndex = (playerStamina*(sprite_get_number(spr_st_bar_big)-1))/playerMaxStamina;
    draw_sprite(spr_st_bar_big,stIndex,xPosBar+19,yPosBar+18);
    
    draw_sprite(spr_base_stats_big,0,xPosBar,yPosBar);
    
    draw_set_alpha(1);
    draw_set_color(c_white);
    draw_set_font(fnt_default6);
    draw_set_halign(fa_center);
    draw_set_valign(fa_top);
    draw_text(xPosBar+19+sprite_get_width(spr_hp_bar_big)/2,yPosBar+2,"HP: " + string(round(playerHeal)) + "/" + string(round(playerMaxHeal)));
    draw_text(xPosBar+20+sprite_get_width(spr_xp_bar_big)/2,yPosBar+10,"EXP: " + string(round(playerEXP)) + "/" + string(round(playerEXPnextLvL)));
    draw_text(xPosBar+19+sprite_get_width(spr_st_bar_big)/2,yPosBar+18,"ST: " + string(round(playerStamina)) + "/" + string(round(playerMaxStamina)));
    draw_set_valign(fa_bottom);
    
    
    draw_sprite(spr_lvl_indicator,indexAnimLvL,xPosBar+5,yPosBar+5);
    if animationNextLvL = 1 {
        if (indexAnimLvL &lt; (sprite_get_number(spr_lvl_indicator)-1)) {
            indexAnimLvL += 1/30;
        } else {
            timesAnimation += 1;
            indexAnimLvL = 0;
            if (timesAnimation &gt;= totalTimesAnimation) {
                animationNextLvL = 0;
                timesAnimation = 0;
            }
        }
    }
    
    draw_set_color(c_white);
    draw_set_font(fnt_default9);
    draw_set_halign(fa_center);
    draw_set_valign(fa_center);
    draw_text(xPosBar+11,yPosBar+13,string(playerLvL));
    draw_set_valign(fa_bottom);

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Visual
if configStatsBar = 0 {

    xPosBar = view_xview[view_current] + 2;
    yPosBar = view_yview[view_current] + 2;   
    
    hpIndex = (playerHeal*(sprite_get_number(spr_hp_bar_visual)-1))/playerMaxHeal;
    draw_sprite(spr_hp_bar_visual,hpIndex,xPosBar+18,yPosBar+8);
    
    stIndex = (playerStamina*(sprite_get_number(spr_st_bar_visual)-1))/playerMaxStamina;
    draw_sprite(spr_st_bar_visual,stIndex,xPosBar+18,yPosBar+14);
    
    xpIndex = (playerEXP*(sprite_get_number(spr_xp_bar_visual)-1))/playerEXPnextLvL;
    draw_sprite(spr_xp_bar_visual,xpIndex,xPosBar+26,yPosBar+12);
    
    draw_sprite(spr_base_stats_visual,0,xPosBar,yPosBar);
    
    draw_sprite(spr_lvl_indicator,indexAnimLvL,xPosBar+5,yPosBar+5);
    if animationNextLvL = 1 {
        if (indexAnimLvL &lt; (sprite_get_number(spr_lvl_indicator)-1)) {
            indexAnimLvL += 1/30;
        } else {
            timesAnimation += 1;
            indexAnimLvL = 0;
            if (timesAnimation &gt;= totalTimesAnimation) {
                animationNextLvL = 0;
                timesAnimation = 0;
            }
        }
    }
    
    draw_set_color(c_white);
    draw_set_font(fnt_default9);
    draw_set_halign(fa_center);
    draw_set_valign(fa_center);
    draw_text(xPosBar+11,yPosBar+13,string(playerLvL));
    draw_set_valign(fa_bottom);

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
