<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-99</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize variables
//Main
globalvar pause; pause = 0;
pauseESC = 0;
h = 0;
saveGame = 0;
globalvar showMainPause; showMainPause = 1;
globalvar showMainSettings; showMainSettings = 0;

/*
//Options
h = 6;
hh = 8;
if configStatsBar = 1 { stBarSIG = "tech" } else { stBarSIG = "visual" }
if configStatsInfo = 1 { genStatSIG = "tech" } else { genStatSIG = "visual" }
if configCDbar = 1 { cdBarSIG = "tech" } else { cdBarSIG = "visual" }
resSIG = 0;
scModeSIG = 0;
w = -1;
if window_get_fullscreen() { wSM = 1} else { wSM = 0 }
toCenter = 0;
timingToCenter = 0; 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Savegame
if saveGame = 1 {

    if saveNum = 1 { 
        if (file_exists("Save1.sav")) {
            file_delete("Save1.sav"); }
        
        ini_open("Save1.sav");
            
            //Profile
                ini_write_real("Profile","saveNum",global.saveNum);//Number of the save
                ini_write_string("Profile","NameProfile",global.NameProfile);
                ini_write_real("Profile","configStatsBar",global.configStatsBar); //Configuration of the hp/exp/st bar
                ini_write_real("Profile","configStatsInfo",global.configStatsInfo); //Configuration of the menu info stats
                ini_write_real("Profile","configCDbar",global.configCDbar); //Configuration of the CD bar
                
            //Progress
                ini_write_real("Progress","worlds",global.worlds); //Number of the unlocked worlds
                ini_write_real("Progress","lvlMap1",global.lvlMap1); //Number of the unlocked maps in the world #1
                ini_write_real("Progress","lvlMap2",global.lvlMap2); //Number of the unlocked maps in the world #2
                ini_write_real("Progress","lvlMap3",global.lvlMap3); //Number of the unlocked maps in the world #3
                ini_write_real("Progress","lvlMap4",global.lvlMap4); //Number of the unlocked maps in the world #4
                ini_write_real("Progress","lvlMap5",global.lvlMap5); //Number of the unlocked maps in the world #5
                ini_write_real("Progress","lvlMap6",global.lvlMap6); //Number of the unlocked maps in the world #6
                ini_write_real("Progress","hPlayed",global.hPlayed); //Hours played
                ini_write_real("Progress","mPlayed",global.mPlayed); //Minutes played
                ini_write_real("Progress","sPlayed",global.sPlayed); //Seconds played
                ini_write_real("Progress","progress",global.progress); //Percentage of the total progress
            
            //Stats
                //Heal
                ini_write_real("Stats - Heal","playerMaxHeal",global.playerMaxHeal); //max player heal
                ini_write_real("Stats - Heal","regenHPs",global.regenHPs); //Max HP regen every second
                
                //Stamina
                ini_write_real("Stats - Stamina","playerMaxStamina",global.playerMaxStamina); //max player ST
                ini_write_real("Stats - Stamina","regenSTs",global.regenSTs); //Max ST regen every second
                
                //Exp
                ini_write_real("Stats - Exp","playerEXP",global.playerEXP); //Current EXP in this LVL
                ini_write_real("Stats - Exp","playerEXPnextLvL",global.playerEXPnextLvL); //Experience needed to reach the next lvl
                ini_write_real("Stats - Exp","playerLvL",global.playerLvL); //Current LvL
                ini_write_real("Stats - Exp","playerPH",global.playerPH); //PH avabiales
                
                //Basic
                ini_write_real("Stats - Basic","playerAD",global.playerAD);
                ini_write_real("Stats - Basic","playerPenArm",global.playerPenArm);
                ini_write_real("Stats - Basic","playerTrueAD",global.playerTrueAD);
                ini_write_real("Stats - Basic","playerAP",global.playerAP);
                ini_write_real("Stats - Basic","playerPenAP",global.playerPenAP)
                ini_write_real("Stats - Basic","playerTrueAP",global.playerTrueAP);
                ini_write_real("Stats - Basic","playerCritickProbability",global.playerCritickProbability);
                ini_write_real("Stats - Basic","playerCritickDamage",global.playerCritickDamage);
                ini_write_real("Stats - Basic","playerArmour",global.playerArmour);
                ini_write_real("Stats - Basic","playerResAP",global.playerResAP);
                ini_write_real("Stats - Basic","resKnockback",global.resKnockback);
                
                
                // Basic Attack
                ini_write_real("Stats - Basic Attack","BasicAttackCD",global.BasicAttackCD);
                ini_write_real("Stats - Basic Attack","staminaBasicAttack",global.staminaBasicAttack);
                
                ini_write_real("Stats - Basic Attack","playerADBasicAttack",global.playerADBasicAttack);
                ini_write_real("Stats - Basic Attack","playerPenArmBasicAttack",global.playerPenArmBasicAttack);
                ini_write_real("Stats - Basic Attack","playerTrueADBasicAttack",global.playerTrueADBasicAttack);
                ini_write_real("Stats - Basic Attack","playerAPBasicAttack",global.playerAPBasicAttack);
                ini_write_real("Stats - Basic Attack","playerPenAPBasicAttack",global.playerPenAPBasicAttack);
                ini_write_real("Stats - Basic Attack","playerTrueAPBasicAttack",global.playerTrueAPBasicAttack);
                ini_write_real("Stats - Basic Attack","playerCritickProbabilityBasicAttack",global.playerCritickProbabilityBasicAttack);
                ini_write_real("Stats - Basic Attack","playerCritickDamageBasicAttack",global.playerCritickDamageBasicAttack);
                
                // Spin
                ini_write_real("Stats - Spin","SpinCD",global.SpinCD);
                ini_write_real("Stats - Spin","staminaSpin",global.staminaSpin);
                
                ini_write_real("Stats - Spin","playerADSpin",global.playerADSpin);
                ini_write_real("Stats - Spin","playerPenArmSpin",global.playerPenArmSpin);
                ini_write_real("Stats - Spin","playerTrueADSpin",global.playerTrueADSpin);
                ini_write_real("Stats - Spin","playerAPSpin",global.playerAPSpin);
                ini_write_real("Stats - Spin","playerPenAPSpin",global.playerPenAPSpin);
                ini_write_real("Stats - Spin","playerTrueAPSpin",global.playerTrueAPSpin);
                ini_write_real("Stats - Spin","playerCritickProbabilitySpin",global.playerCritickProbabilitySpin);
                ini_write_real("Stats - Spin","playerCritickDamageSpin",global.playerCritickDamageSpin);
                
                // Vertical Dash
                ini_write_real("Stats - Vertical Dash","VerticalDashCD",global.VerticalDashCD);
                ini_write_real("Stats - Vertical Dash","staminaVDash",global.staminaVDash);
                
                ini_write_real("Stats - Vertical Dash","playerADVDash",global.playerADVDash);
                ini_write_real("Stats - Vertical Dash","playerPenArmVDash",global.playerPenArmVDash);
                ini_write_real("Stats - Vertical Dash","playerTrueADVDash",global.playerTrueADVDash);
                ini_write_real("Stats - Vertical Dash","playerAPVDash",global.playerAPVDash);
                ini_write_real("Stats - Vertical Dash","playerPenAPVDash",global.playerPenAPVDash);
                ini_write_real("Stats - Vertical Dash","playerTrueAPVDash",global.playerTrueAPVDash);
                ini_write_real("Stats - Vertical Dash","playerCritickProbabilityVDash",global.playerCritickProbabilityVDash);
                ini_write_real("Stats - Vertical Dash","playerCritickDamageVDash",global.playerCritickDamageVDash);
                
                // Horizontal Dash
                ini_write_real("Stats - Horizontal Dash","HorizontalDashCD",global.HorizontalDashCD);
                ini_write_real("Stats - Horizontal Dash","staminaHDash",global.staminaHDash);
                
                ini_write_real("Stats - Horizontal Dash","playerADHDash",global.playerADHDash);
                ini_write_real("Stats - Horizontal Dash","playerPenArmHDash",global.playerPenArmHDash);
                ini_write_real("Stats - Horizontal Dash","playerTrueADHDash",global.playerTrueADHDash);
                ini_write_real("Stats - Horizontal Dash","playerAPHDash",global.playerAPHDash);
                ini_write_real("Stats - Horizontal Dash","playerPenAPHDash",global.playerPenAPHDash);
                ini_write_real("Stats - Horizontal Dash","playerTrueAPHDash",global.playerTrueAPHDash);
                ini_write_real("Stats - Horizontal Dash","playerCritickProbabilityHDash",global.playerCritickProbabilityHDash); 
                ini_write_real("Stats - Horizontal Dash","playerCritickDamageHDash",global.playerCritickDamageHDash);
            
            ini_close();
        }
    } 
    if saveNum = 2 { 
        if (file_exists("Save2.sav")) {
            file_delete("Save2.sav"); }
        
        ini_open("Save2.sav");
            
            //Profile
                ini_write_real("Profile","saveNum",global.saveNum);//Number of the save
                ini_write_string("Profile","NameProfile",global.NameProfile);
                ini_write_real("Profile","configStatsBar",global.configStatsBar); //Configuration of the hp/exp/st bar
                ini_write_real("Profile","configStatsInfo",global.configStatsInfo); //Configuration of the menu info stats
                ini_write_real("Profile","configCDbar",global.configCDbar); //Configuration of the CD bar
                
            //Progress
                ini_write_real("Progress","worlds",global.worlds); //Number of the unlocked worlds
                ini_write_real("Progress","lvlMap1",global.lvlMap1); //Number of the unlocked maps in the world #1
                ini_write_real("Progress","lvlMap2",global.lvlMap2); //Number of the unlocked maps in the world #2
                ini_write_real("Progress","lvlMap3",global.lvlMap3); //Number of the unlocked maps in the world #3
                ini_write_real("Progress","lvlMap4",global.lvlMap4); //Number of the unlocked maps in the world #4
                ini_write_real("Progress","lvlMap5",global.lvlMap5); //Number of the unlocked maps in the world #5
                ini_write_real("Progress","lvlMap6",global.lvlMap6); //Number of the unlocked maps in the world #6
                ini_write_real("Progress","hPlayed",global.hPlayed); //Hours played
                ini_write_real("Progress","mPlayed",global.mPlayed); //Minutes played
                ini_write_real("Progress","sPlayed",global.sPlayed); //Seconds played
                ini_write_real("Progress","progress",global.progress); //Percentage of the total progress
            
            //Stats
                //Heal
                ini_write_real("Stats - Heal","playerMaxHeal",global.playerMaxHeal); //max player heal
                ini_write_real("Stats - Heal","regenHPs",global.regenHPs); //Max HP regen every second
                
                //Stamina
                ini_write_real("Stats - Stamina","playerMaxStamina",global.playerMaxStamina); //max player ST
                ini_write_real("Stats - Stamina","regenSTs",global.regenSTs); //Max ST regen every second
                
                //Exp
                ini_write_real("Stats - Exp","playerEXP",global.playerEXP); //Current EXP in this LVL
                ini_write_real("Stats - Exp","playerEXPnextLvL",global.playerEXPnextLvL); //Experience needed to reach the next lvl
                ini_write_real("Stats - Exp","playerLvL",global.playerLvL); //Current LvL
                ini_write_real("Stats - Exp","playerPH",global.playerPH); //PH avabiales
                
                //Basic
                ini_write_real("Stats - Basic","playerAD",global.playerAD);
                ini_write_real("Stats - Basic","playerPenArm",global.playerPenArm);
                ini_write_real("Stats - Basic","playerTrueAD",global.playerTrueAD);
                ini_write_real("Stats - Basic","playerAP",global.playerAP);
                ini_write_real("Stats - Basic","playerPenAP",global.playerPenAP)
                ini_write_real("Stats - Basic","playerTrueAP",global.playerTrueAP);
                ini_write_real("Stats - Basic","playerCritickProbability",global.playerCritickProbability);
                ini_write_real("Stats - Basic","playerCritickDamage",global.playerCritickDamage);
                ini_write_real("Stats - Basic","playerArmour",global.playerArmour);
                ini_write_real("Stats - Basic","playerResAP",global.playerResAP);
                ini_write_real("Stats - Basic","resKnockback",global.resKnockback);
                
                
                // Basic Attack
                ini_write_real("Stats - Basic Attack","BasicAttackCD",global.BasicAttackCD);
                ini_write_real("Stats - Basic Attack","staminaBasicAttack",global.staminaBasicAttack);
                
                ini_write_real("Stats - Basic Attack","playerADBasicAttack",global.playerADBasicAttack);
                ini_write_real("Stats - Basic Attack","playerPenArmBasicAttack",global.playerPenArmBasicAttack);
                ini_write_real("Stats - Basic Attack","playerTrueADBasicAttack",global.playerTrueADBasicAttack);
                ini_write_real("Stats - Basic Attack","playerAPBasicAttack",global.playerAPBasicAttack);
                ini_write_real("Stats - Basic Attack","playerPenAPBasicAttack",global.playerPenAPBasicAttack);
                ini_write_real("Stats - Basic Attack","playerTrueAPBasicAttack",global.playerTrueAPBasicAttack);
                ini_write_real("Stats - Basic Attack","playerCritickProbabilityBasicAttack",global.playerCritickProbabilityBasicAttack);
                ini_write_real("Stats - Basic Attack","playerCritickDamageBasicAttack",global.playerCritickDamageBasicAttack);
                
                // Spin
                ini_write_real("Stats - Spin","SpinCD",global.SpinCD);
                ini_write_real("Stats - Spin","staminaSpin",global.staminaSpin);
                
                ini_write_real("Stats - Spin","playerADSpin",global.playerADSpin);
                ini_write_real("Stats - Spin","playerPenArmSpin",global.playerPenArmSpin);
                ini_write_real("Stats - Spin","playerTrueADSpin",global.playerTrueADSpin);
                ini_write_real("Stats - Spin","playerAPSpin",global.playerAPSpin);
                ini_write_real("Stats - Spin","playerPenAPSpin",global.playerPenAPSpin);
                ini_write_real("Stats - Spin","playerTrueAPSpin",global.playerTrueAPSpin);
                ini_write_real("Stats - Spin","playerCritickProbabilitySpin",global.playerCritickProbabilitySpin);
                ini_write_real("Stats - Spin","playerCritickDamageSpin",global.playerCritickDamageSpin);
                
                // Vertical Dash
                ini_write_real("Stats - Vertical Dash","VerticalDashCD",global.VerticalDashCD);
                ini_write_real("Stats - Vertical Dash","staminaVDash",global.staminaVDash);
                
                ini_write_real("Stats - Vertical Dash","playerADVDash",global.playerADVDash);
                ini_write_real("Stats - Vertical Dash","playerPenArmVDash",global.playerPenArmVDash);
                ini_write_real("Stats - Vertical Dash","playerTrueADVDash",global.playerTrueADVDash);
                ini_write_real("Stats - Vertical Dash","playerAPVDash",global.playerAPVDash);
                ini_write_real("Stats - Vertical Dash","playerPenAPVDash",global.playerPenAPVDash);
                ini_write_real("Stats - Vertical Dash","playerTrueAPVDash",global.playerTrueAPVDash);
                ini_write_real("Stats - Vertical Dash","playerCritickProbabilityVDash",global.playerCritickProbabilityVDash);
                ini_write_real("Stats - Vertical Dash","playerCritickDamageVDash",global.playerCritickDamageVDash);
                
                // Horizontal Dash
                ini_write_real("Stats - Horizontal Dash","HorizontalDashCD",global.HorizontalDashCD);
                ini_write_real("Stats - Horizontal Dash","staminaHDash",global.staminaHDash);
                
                ini_write_real("Stats - Horizontal Dash","playerADHDash",global.playerADHDash);
                ini_write_real("Stats - Horizontal Dash","playerPenArmHDash",global.playerPenArmHDash);
                ini_write_real("Stats - Horizontal Dash","playerTrueADHDash",global.playerTrueADHDash);
                ini_write_real("Stats - Horizontal Dash","playerAPHDash",global.playerAPHDash);
                ini_write_real("Stats - Horizontal Dash","playerPenAPHDash",global.playerPenAPHDash);
                ini_write_real("Stats - Horizontal Dash","playerTrueAPHDash",global.playerTrueAPHDash);
                ini_write_real("Stats - Horizontal Dash","playerCritickProbabilityHDash",global.playerCritickProbabilityHDash); 
                ini_write_real("Stats - Horizontal Dash","playerCritickDamageHDash",global.playerCritickDamageHDash);            
            
            ini_close();
        }
        
    if saveNum = 3 { 
        if (file_exists("Save3.sav")) {
            file_delete("Save3.sav"); }
            
        ini_open("Save3.sav");
            
            //Profile
                ini_write_real("Profile","saveNum",global.saveNum);//Number of the save
                ini_write_string("Profile","NameProfile",global.NameProfile);
                ini_write_real("Profile","configStatsBar",global.configStatsBar); //Configuration of the hp/exp/st bar
                ini_write_real("Profile","configStatsInfo",global.configStatsInfo); //Configuration of the menu info stats
                ini_write_real("Profile","configCDbar",global.configCDbar); //Configuration of the CD bar
                
            //Progress
                ini_write_real("Progress","worlds",global.worlds); //Number of the unlocked worlds
                ini_write_real("Progress","lvlMap1",global.lvlMap1); //Number of the unlocked maps in the world #1
                ini_write_real("Progress","lvlMap2",global.lvlMap2); //Number of the unlocked maps in the world #2
                ini_write_real("Progress","lvlMap3",global.lvlMap3); //Number of the unlocked maps in the world #3
                ini_write_real("Progress","lvlMap4",global.lvlMap4); //Number of the unlocked maps in the world #4
                ini_write_real("Progress","lvlMap5",global.lvlMap5); //Number of the unlocked maps in the world #5
                ini_write_real("Progress","lvlMap6",global.lvlMap6); //Number of the unlocked maps in the world #6
                ini_write_real("Progress","hPlayed",global.hPlayed); //Hours played
                ini_write_real("Progress","mPlayed",global.mPlayed); //Minutes played
                ini_write_real("Progress","sPlayed",global.sPlayed); //Seconds played
                ini_write_real("Progress","progress",global.progress); //Percentage of the total progress
            
            //Stats
                //Heal
                ini_write_real("Stats - Heal","playerMaxHeal",global.playerMaxHeal); //max player heal
                ini_write_real("Stats - Heal","regenHPs",global.regenHPs); //Max HP regen every second
                
                //Stamina
                ini_write_real("Stats - Stamina","playerMaxStamina",global.playerMaxStamina); //max player ST
                ini_write_real("Stats - Stamina","regenSTs",global.regenSTs); //Max ST regen every second
                
                //Exp
                ini_write_real("Stats - Exp","playerEXP",global.playerEXP); //Current EXP in this LVL
                ini_write_real("Stats - Exp","playerEXPnextLvL",global.playerEXPnextLvL); //Experience needed to reach the next lvl
                ini_write_real("Stats - Exp","playerLvL",global.playerLvL); //Current LvL
                ini_write_real("Stats - Exp","playerPH",global.playerPH); //PH avabiales
                
                //Basic
                ini_write_real("Stats - Basic","playerAD",global.playerAD);
                ini_write_real("Stats - Basic","playerPenArm",global.playerPenArm);
                ini_write_real("Stats - Basic","playerTrueAD",global.playerTrueAD);
                ini_write_real("Stats - Basic","playerAP",global.playerAP);
                ini_write_real("Stats - Basic","playerPenAP",global.playerPenAP)
                ini_write_real("Stats - Basic","playerTrueAP",global.playerTrueAP);
                ini_write_real("Stats - Basic","playerCritickProbability",global.playerCritickProbability);
                ini_write_real("Stats - Basic","playerCritickDamage",global.playerCritickDamage);
                ini_write_real("Stats - Basic","playerArmour",global.playerArmour);
                ini_write_real("Stats - Basic","playerResAP",global.playerResAP);
                ini_write_real("Stats - Basic","resKnockback",global.resKnockback);
                
                
                // Basic Attack
                ini_write_real("Stats - Basic Attack","BasicAttackCD",global.BasicAttackCD);
                ini_write_real("Stats - Basic Attack","staminaBasicAttack",global.staminaBasicAttack);
                
                ini_write_real("Stats - Basic Attack","playerADBasicAttack",global.playerADBasicAttack);
                ini_write_real("Stats - Basic Attack","playerPenArmBasicAttack",global.playerPenArmBasicAttack);
                ini_write_real("Stats - Basic Attack","playerTrueADBasicAttack",global.playerTrueADBasicAttack);
                ini_write_real("Stats - Basic Attack","playerAPBasicAttack",global.playerAPBasicAttack);
                ini_write_real("Stats - Basic Attack","playerPenAPBasicAttack",global.playerPenAPBasicAttack);
                ini_write_real("Stats - Basic Attack","playerTrueAPBasicAttack",global.playerTrueAPBasicAttack);
                ini_write_real("Stats - Basic Attack","playerCritickProbabilityBasicAttack",global.playerCritickProbabilityBasicAttack);
                ini_write_real("Stats - Basic Attack","playerCritickDamageBasicAttack",global.playerCritickDamageBasicAttack);
                
                // Spin
                ini_write_real("Stats - Spin","SpinCD",global.SpinCD);
                ini_write_real("Stats - Spin","staminaSpin",global.staminaSpin);
                
                ini_write_real("Stats - Spin","playerADSpin",global.playerADSpin);
                ini_write_real("Stats - Spin","playerPenArmSpin",global.playerPenArmSpin);
                ini_write_real("Stats - Spin","playerTrueADSpin",global.playerTrueADSpin);
                ini_write_real("Stats - Spin","playerAPSpin",global.playerAPSpin);
                ini_write_real("Stats - Spin","playerPenAPSpin",global.playerPenAPSpin);
                ini_write_real("Stats - Spin","playerTrueAPSpin",global.playerTrueAPSpin);
                ini_write_real("Stats - Spin","playerCritickProbabilitySpin",global.playerCritickProbabilitySpin);
                ini_write_real("Stats - Spin","playerCritickDamageSpin",global.playerCritickDamageSpin);
                
                // Vertical Dash
                ini_write_real("Stats - Vertical Dash","VerticalDashCD",global.VerticalDashCD);
                ini_write_real("Stats - Vertical Dash","staminaVDash",global.staminaVDash);
                
                ini_write_real("Stats - Vertical Dash","playerADVDash",global.playerADVDash);
                ini_write_real("Stats - Vertical Dash","playerPenArmVDash",global.playerPenArmVDash);
                ini_write_real("Stats - Vertical Dash","playerTrueADVDash",global.playerTrueADVDash);
                ini_write_real("Stats - Vertical Dash","playerAPVDash",global.playerAPVDash);
                ini_write_real("Stats - Vertical Dash","playerPenAPVDash",global.playerPenAPVDash);
                ini_write_real("Stats - Vertical Dash","playerTrueAPVDash",global.playerTrueAPVDash);
                ini_write_real("Stats - Vertical Dash","playerCritickProbabilityVDash",global.playerCritickProbabilityVDash);
                ini_write_real("Stats - Vertical Dash","playerCritickDamageVDash",global.playerCritickDamageVDash);
                
                // Horizontal Dash
                ini_write_real("Stats - Horizontal Dash","HorizontalDashCD",global.HorizontalDashCD);
                ini_write_real("Stats - Horizontal Dash","staminaHDash",global.staminaHDash);
                
                ini_write_real("Stats - Horizontal Dash","playerADHDash",global.playerADHDash);
                ini_write_real("Stats - Horizontal Dash","playerPenArmHDash",global.playerPenArmHDash);
                ini_write_real("Stats - Horizontal Dash","playerTrueADHDash",global.playerTrueADHDash);
                ini_write_real("Stats - Horizontal Dash","playerAPHDash",global.playerAPHDash);
                ini_write_real("Stats - Horizontal Dash","playerPenAPHDash",global.playerPenAPHDash);
                ini_write_real("Stats - Horizontal Dash","playerTrueAPHDash",global.playerTrueAPHDash);
                ini_write_real("Stats - Horizontal Dash","playerCritickProbabilityHDash",global.playerCritickProbabilityHDash); 
                ini_write_real("Stats - Horizontal Dash","playerCritickDamageHDash",global.playerCritickDamageHDash);
            
            ini_close();
        }    

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Pause
if !window_has_focus() { pause = 1; pauseESC = 1; }

if keyboard_check_pressed(vk_escape) &amp;&amp; (showInfoStats = 0) &amp;&amp; (showMainSettings = 0) { 
    h = 0
    if (pause = 0) {
        pause = 1;
        pauseESC = 1;
    } else {
        pause = 0;
        pauseESC = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Main Pause
if (pauseESC = 1) &amp;&amp; (showMainPause = 1){

x= view_xview[view_current] + (view_wview[0]/2);
y= view_yview[view_current] + (view_hview[0]/2);

    draw_set_alpha(0.7)
    draw_set_colour(c_white)
    draw_rectangle(x-230, y-100, x+230, y+50, false)
    draw_set_alpha(1);
    draw_set_color(c_gray);
    draw_set_font(fnt_default50);
    draw_set_halign(fa_center);
    draw_text(x,y-110,"PAUSE");
    draw_set_font(fnt_default12); 
    draw_set_color(c_black);
    if ( h = 0) {   
        draw_set_alpha(0.80); 
        draw_text(x,y-26,"Resume");
        draw_set_alpha(0.5); 
        draw_text(x,y-10,"Save");
        draw_text(x,y+5,"Options");
        draw_text(x,y+20,"Exit Game");        
        draw_set_alpha(0.80);  
    }
    if ( h = 1) {   
        draw_set_alpha(0.5); 
        draw_text(x,y-25,"Resume");
        draw_set_alpha(0.80); 
        draw_text(x,y-11,"Save");
        draw_set_alpha(0.5); 
        draw_text(x,y+5,"Options");
        draw_text(x,y+20,"Exit Game");        
        draw_set_alpha(0.80);  
    }
    if ( h = 2) {   
        draw_set_alpha(0.5); 
        draw_text(x,y-25,"Resume");
        draw_text(x,y-10,"Save");
        draw_set_alpha(0.80); 
        draw_text(x,y+4,"Options");
        draw_set_alpha(0.5);
        draw_text(x,y+20,"Exit Game");        
        draw_set_alpha(0.80);   
    }        
    if ( h = 3) {   
        draw_set_alpha(0.5); 
        draw_text(x,y-25,"Resume");
        draw_text(x,y-10,"Save");
        draw_text(x,y+5,"Options");
        draw_set_alpha(0.80);
        draw_text(x,y+19,"Exit Game");        
        draw_set_alpha(0.80);  
    } 

    


    
    if (pauseESC = 1) &amp;&amp; (keyboard_check_pressed(vk_down)) &amp;&amp; (h&lt;3) {
        h += 1;
    }
    if (pauseESC = 1) &amp;&amp; (keyboard_check_pressed(vk_up)) &amp;&amp; (h&gt;0) {
        h -= 1;
    }


    if (keyboard_check_pressed(vk_enter)) &amp;&amp; (pauseESC = 1) {
        if (h = 0) {
            global.pause = 0;
            pauseESC = 0;
        }
        if (h = 1) {
            //Save Game
            saveGame = 1;
            
                /*
                //Base Save Game Variables
                ini_write_real/ini_write_string("Section","saveName",varToSave);
                */
                
        }
        if (h = 2) {
            showMainSettings = 1;
            showMainPause = 0;
            h = 0;
            //instance_destroy();
        }
        if (h = 3) {
            room_goto(room_clean);
        }
    }

    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
