<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-99</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>globalvar showInfoStats; showInfoStats = 0;
i = 0;
pag = 0;
h = 0;
totalHoptions = 5;

totalPag = 5;
positionX = -150;
positionY = -80;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Max bost
    //Basic
    playerMaxHealUpMax = 200;
    regenHPsUpMax =  200;
    playerMaxStaminaUpMax = 200;
    regenSTsUpMax = 50;
    playerADUpMax = 10;
    playerPenArmUpMax = 10;
    playerTrueADUpMax = 10;
    playerAPUpMax = 10;
    playerPenAPUpMax = 10;
    playerTrueAPUpMax = 10;
    playerCritickProbabilityUpMax = 45;
    playerCritickDamageUpMax = 20;
    playerArmourUpMax = 10;
    playerResAPUpMax = 10;
    resKnockbackUpMax = 10;
    
    //BasAttack
    BasicAttackCDUpMax = 0.5;
    staminaBasicAttackUpMax = 5;
    
    //Spin
    SpinCDUpMax = 0.5;
    staminaSpinUpMax = 5;
    
    //vDash
    VerticalDashCDUpMax = 0.5;
    staminaVDashUpMax = 5;
    
    //hDash
    HorizontalDashCDUpMax = 0.5;
    staminaHDashUpMax = 5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Upgrades
if (keyboard_check_pressed(vk_enter)) &amp;&amp; (playerPH &gt; 0) {
    if pag = 1 {
        if (h = 0) &amp;&amp; (playerMaxHeal &lt; playerMaxHealUpMax){ 
            playerMaxHeal += upgradePlayerMaxHeal;
            playerPH -= 1;
        }
        if (h = 1) &amp;&amp; (regenHPs &lt; regenHPsUpMax) { 
            regenHPs += upgradeRegenHPs;
            accelerationRegenHP += upgradeAccelerationRegenHP;
            playerPH -= 1;
        }
        if (h = 2) &amp;&amp; (playerMaxStamina &lt; playerMaxStaminaUpMax) { 
            playerMaxStamina += upgradePlayerMaxStamina;
            playerPH -= 1;
        }
        if (h = 3) &amp;&amp; (regenSTs &lt; regenSTsUpMax) { 
            regenSTs += upgradeRegenSTs;
            accelerationRegenST += upgradeAccelerationRegenST;
            playerPH -= 1;
        }
        if (h = 4) &amp;&amp; (playerAD &lt; playerADUpMax) { 
            playerAD += upgradePlayerAD;
            playerPH -= 1;
        }
        if (h = 5) &amp;&amp; (playerPenArm &lt; playerPenArmUpMax) { 
            playerPenArm += upgradePlayerPenArm;
            playerPH -= 1;            
        }
        if (h = 6) &amp;&amp; (playerTrueAD &lt; playerPenArmUpMax) { 
            playerTrueAD += upgradePlayerTrueAD;
            playerPH -= 1;
        }
        if (h = 7) &amp;&amp; (playerAP &lt; playerAPUpMax) { 
            playerAP += upgradePlayerAP;
            playerPH -= 1;
        }
        if (h = 8) &amp;&amp; (playerPenAP &lt; playerPenAPUpMax) { 
            playerPenAP += upgradePlayerPenAP;
            playerPH -= 1;
        }
        if (h = 9) &amp;&amp; (playerTrueAP &lt; playerTrueAPUpMax){ 
            playerTrueAP += upgradePlayerTrueAP;
            playerPH -= 1;
        }
        if (h = 10) &amp;&amp; (playerCritickProbability &lt; playerCritickProbabilityUpMax){ 
            playerCritickProbability += upgradePlayerCritickProbability;
            playerPH -= 1;
        }
        if (h = 11) &amp;&amp; (playerCritickDamage &lt; playerCritickDamageUpMax){ 
            playerCritickDamage += upgradePlayerCritickDamage;
            playerPH -= 1;
        }
        if (h = 12) &amp;&amp; (playerArmour &lt; playerArmourUpMax) { 
            playerArmour += upgradePlayerArmour;
            playerPH -= 1;
        }
        if (h = 13) &amp;&amp; (playerResAP &lt; playerResAPUpMax) { 
            playerResAP += upgradePlayerResAP;
            playerPH -= 1;
        }
        if (h = 14) &amp;&amp; (resKnockback &lt; resKnockbackUpMax) { 
            resKnockback += upgradeResKnockback;
            playerPH -= 1;
        }
    }
    if pag = 2 {
        if (h = 0) &amp;&amp; (BasicAttackCD &gt; BasicAttackCDUpMax) { 
            BasicAttackCD -= upgradeCDbAttack;
            playerPH -= 1;
        }
        if (h = 1) &amp;&amp; (staminaBasicAttack &lt; staminaBasicAttackUpMax) { 
            staminaBasicAttack -= upgradeSTbAttack;
            playerPH -= 1;
        }
    }
    if pag = 3 {
        if (h = 0) &amp;&amp; (SpinCD &gt; SpinCDUpMax){ 
            SpinCD -= upgradeCDspin;
            playerPH -= 1;
        }
        if (h = 1) &amp;&amp; (staminaSpin &lt; staminaSpinUpMax) { 
            staminaSpin -= upgradeSTspin;
            playerPH -= 1;
        }
    }
    if pag = 4 {
        if (h = 0) &amp;&amp; (VerticalDashCD &gt; VerticalDashCDUpMax) { 
            VerticalDashCD -= upgradeCDvDash;
            playerPH -= 1;
        }
        if (h = 1) &amp;&amp; (staminaVDash &lt; staminaVDashUpMax) { 
            staminaVDash -= upgradeSTvDash;
            playerPH -= 1;
        }
    }
    if pag = 5 {
        if (h = 0) &amp;&amp; (HorizontalDashCD &gt; HorizontalDashCDUpMax){ 
            HorizontalDashCD -= upgradeCDhDash;
            playerPH -= 1;
        }
        if (h = 1) &amp;&amp; (staminaHDash &lt; staminaHDashUpMax) { 
            staminaHDash -= upgradeSThDash;
            playerPH -= 1;
        }
    }    
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Show stats panel
if (keyboard_check_pressed(vk_tab)) &amp;&amp; (global.showInfoStats = 0) &amp;&amp; (pause = 0){ 
    action_create_object(obj_infoSettings,x,y); 
    global.showInfoStats = 1; 
    pause = 1;
}

if (keyboard_check_released(vk_tab)) &amp;&amp; (showInfoStats = 1) { i = 1; }

if 
( (keyboard_check_pressed(vk_tab)) &amp;&amp; (global.showInfoStats = 1) &amp;&amp; (i = 1) )
||
( (keyboard_check_pressed(vk_escape)) &amp;&amp; (global.showInfoStats = 1) &amp;&amp; (i = 1) ) 
{
    global.showInfoStats = 0;
    i = 0;
    pause = 0;
}

//Change panel
if showInfoStats = 1 {
    if (keyboard_check_pressed(vk_right)) &amp;&amp; (pag &lt; totalPag) {
        pag += 1;
        h = 0;
    }
    if (keyboard_check_pressed(vk_left)) &amp;&amp; (pag &gt; 0){
        pag -= 1;
        h = 0;
    }
    if (keyboard_check_pressed(vk_down)) &amp;&amp; (h &lt; totalHoptions) {
        h += 1;
    }
    if (keyboard_check_pressed(vk_up)) &amp;&amp; (h &gt; 0) {
        h -= 1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if showInfoStats = 1 {
x= view_xview[view_current] + (view_wview[0]/2);
y= view_yview[view_current] + (view_hview[0]/2);

    draw_set_alpha(0.7)
    draw_set_colour(c_white)
    draw_rectangle(x-400, y-300, x+400, y+200, false)
    draw_set_alpha(1);
    draw_set_color(c_gray);
    draw_set_font(fnt_default50);
    draw_set_halign(fa_center);
    if (pag = 0) { draw_text(x,y-100,"Level"); }
    if (pag = 1) { draw_text(x,y-100,"Fight"); }
    if (pag = 2) { draw_text(x,y-100,"Basic Attack"); }
    if (pag = 3) { draw_text(x,y-100,"Spin"); }
    if (pag = 4) { draw_text(x,y-100,"Vertical Dash"); }
    if (pag = 5) { draw_text(x,y-100,"Horizontal Dash"); }
    
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
    draw_set_font(fnt_default9);    
    if pag = 0 {
        draw_text(x+positionX,y+positionY,
             "Level: " + string(playerLvL) 
            + "#"
            + "#Current EXP in this Lvl: " + string(playerEXP) 
            + "#EXP needed to next lvl: " + string(playerEXPnextLvL-playerEXP) 
            + "#Total exp needed to next Lvl: " + string(playerEXPnextLvL) 
            + "#"
            + "#Total EXP: " + string((playerLvL-1)*playerEXPaddNewLvL+playerEXP)
            + "#"
            + "#Available ability points: " + string(playerPH)
        );
    }
    if pag = 1 {
        totalHoptions = 14;
        draw_text(x+positionX,y+positionY,
        //+ "#"
        + "Heal (HP): " + string(playerMaxHeal)
        + "#HP regeneration every second: " + string(regenHPs)
        //+ "#"
        + "#Stamina (ST): " + string(playerMaxStamina)
        + "#ST regeneration every second: " + string(regenSTs)    
        //+ "#"
        + "#Physical damage: " + string(playerAD) 
        + "#Armour penetration: " + string(playerPenArm) 
        + "#True physical damage: " + string(playerTrueAD) 
        //+ "#"
        + "#Magical damage: " + string(playerAP)
        + "#Magical penetration: " + string(playerPenAP)
        + "#True magical damage: " + string(playerTrueAP)
        //+ "#"
        + "#Critical hit probability: " + string(playerCritickProbability) + "%"
        + "#Critical damage: x" + string(playerCritickDamage)
        //+ "#"
        + "#Armour: " + string(playerArmour)
        + "#Magic resistance: " + string(playerResAP)
        + "#Knockback resistance: " + string(resKnockback)
        );        
    }
    if pag = 2 {
        totalHoptions = 1;
        draw_text(x+positionX,y+positionY,
        //+ "#"
        + "Cooldown: " + string(BasicAttackCD) + "s"
        + "#Stamina cost: " + string(staminaBasicAttack) +"ST"
        //+ "#"
        + "#Physical damage: x" + string(playerADBasicAttack) 
        + "#Armour penetration: x" + string(playerPenArmBasicAttack) 
        + "#True physical damage: x" + string(playerTrueADBasicAttack) 
        //+ "#"
        + "#Magical damage: x" + string(playerAPBasicAttack)
        + "#Magical penetration: x" + string(playerPenAPBasicAttack)
        + "#True magical damage: x" + string(playerTrueAPBasicAttack)
        //+ "#"
        + "#Critical hit probability: " + string(playerCritickProbabilityBasicAttack) + "%"
        + "#Critical damage: x" + string(playerCritickDamageBasicAttack)
        );      
    }
    if pag = 3 {
        totalHoptions = 1;
        draw_text(x+positionX,y+positionY,
        //+ "#"
        + "Cooldown: " + string(SpinCD) + "s"
        + "#Stamina cost: " + string(staminaSpin) +"ST"
        //+ "#"
        + "#Physical damage: x" + string(playerADSpin) 
        + "#Armour penetration: x" + string(playerPenArmSpin) 
        + "#True physical damage: x" + string(playerTrueADSpin) 
        //+ "#"
        + "#Magical damage: x" + string(playerAPSpin)
        + "#Magical penetration: x" + string(playerPenAPSpin)
        + "#True magical damage: x" + string(playerTrueAPSpin)
        //+ "#"
        + "#Critical hit probability: " + string(playerCritickProbabilitySpin) + "%"
        + "#Critical damage: x" + string(playerCritickDamageSpin)
        );      
    }
    if pag = 4 {
        totalHoptions = 1;
        draw_text(x+positionX,y+positionY,
        //+ "#"
        + "Cooldown: " + string(VerticalDashCD) + "s"
        + "#Stamina cost: " + string(staminaVDash) +"ST"
        //+ "#"
        + "#Physical damage: x" + string(playerADVDash) 
        + "#Armour penetration: x" + string(playerPenArmVDash) 
        + "#True physical damage: x" + string(playerTrueADVDash) 
        //+ "#"
        + "#Magical damage: x" + string(playerAPVDash)
        + "#Magical penetration: x" + string(playerPenAPVDash)
        + "#True magical damage: x" + string(playerTrueAPVDash)
        //+ "#"
        + "#Critical hit probability: " + string(playerCritickProbabilityVDash) + "%"
        + "#Critical damage: x" + string(playerCritickDamageVDash)
        );      
    }
    if pag = 5 {
        totalHoptions = 1;
        draw_text(x+positionX,y+positionY,
        //+ "#"
        + "Cooldown: " + string(HorizontalDashCD) + "s"
        + "#Stamina cost: " + string(staminaHDash) +"ST"
        //+ "#"
        + "#Physical damage: x" + string(playerADHDash) 
        + "#Armour penetration: x" + string(playerPenArmHDash) 
        + "#True physical damage: x" + string(playerTrueADHDash) 
        //+ "#"
        + "#Magical damage: x" + string(playerAPHDash)
        + "#Magical penetration: x" + string(playerPenAPHDash)
        + "#True magical damage: x" + string(playerTrueAPHDash)
        //+ "#"
        + "#Critical hit probability: " + string(playerCritickProbabilityHDash) + "%"
        + "#Critical damage: x" + string(playerCritickDamageHDash)
        );      
    }
                       
    draw_set_alpha(1);   
    
    if pag != 0 {
        if (playerPH &gt; 0) {
            draw_circle_colour(x+positionX-10,y+positionY+7+(h*17),5,c_red,c_maroon,false) 
        } else {
            draw_circle_colour(x+positionX-10,y+positionY+7+(h*17),5,c_gray,c_dkgray,false) 
        }
    }
        /*if h = 1 || h = 5 || h = 7 { 
            if keyboard_check_pressed(vk_down) { h += 1; }
            if keyboard_check_pressed(vk_up) { h -= 1; }
        }*/    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
