<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>h = 6;
hh = 8;

if configStatsBar = 1 { stBarSIG = "tech" } else { stBarSIG = "visual" }
if configStatsInfo = 1 { genStatSIG = "tech" } else { genStatSIG = "visual" }
if configCDbar = 1 { cdBarSIG = "tech" } else { cdBarSIG = "visual" }

resSIG = 0;
scModeSIG = 0;

w = -1;
if window_get_fullscreen() { wSM = 1} else { wSM = 0 }

toCenter = 0;
timingToCenter = 0; 

showPanelOk = 0;
saveConfig = 0;
sResConfigDef = 15;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if toCenter = 1 {
    timingToCenter += 1/room_speed;
    if timingToCenter &gt;= (1/(room_speed-10)) {
        window_center();
        timingToCenter = 0;
        toCenter = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Options
x= view_xview[view_current] + (view_wview[0]/2);
y= view_yview[view_current] + (view_hview[0]/2);

if (showMainSettings = 1) &amp;&amp; (showMainPause = 0) {
    if showPanelOk = 0 {    
        draw_set_alpha(0.7)
        draw_set_colour(c_white)
        draw_rectangle(x-230, y-100, x+230, y+50, false)
        draw_set_alpha(1);
        draw_set_color(c_gray);
        draw_set_font(fnt_default50);
        draw_set_halign(fa_center);
        draw_text(x,y-110,"Settings");
        draw_set_font(fnt_default9); 
        draw_set_color(c_dkgray);
        
        draw_set_halign(fa_left);
        draw_set_valign(fa_middle);
        draw_text_ext(x-120,y-30,"
            Interface +
        #Stats Bar: " + string(stBarSIG) + "
        #General Info: " + string(genStatSIG) + "
        #Cooldown Bar: " + string(cdBarSIG) + "
        #
        #    Graphics
        #Resolution: " + string(resSIG) + "
        #Screen Mode: " + string(scModeSIG) + "
        #
        #        Apply
        #        Quit
        # ",5,360);
    
        
        
    if (keyboard_check_pressed(vk_up)) &amp;&amp; (h&lt;6) {
        h += 1;
    }
    if (keyboard_check_pressed(vk_down)) &amp;&amp; (h&gt;0) {
        h -= 1;
    }
        
    
    if h = 0 { hh = -2 }
    if h = 1 { hh = -1 }
    if h = 2 { hh = 1 }
    if h = 3 { hh = 2 }
    if h = 4 { hh = 5 }
    if h = 5 { hh = 6 }
    if h = 6 { hh = 7 }
    
    draw_text_ext(x-130,y-(10*hh),"&gt;",5,360);
    
    if keyboard_check_pressed(vk_left) || keyboard_check_pressed(vk_right){
        if hh = 7 {
            if stBarSIG = "visual" { stBarSIG = "tech" } else { stBarSIG = "visual" }
        }
        if hh = 6 {
            if genStatSIG = "visual" { genStatSIG = "tech" } else { genStatSIG = "visual" }
        }
        if hh = 5 {
            if cdBarSIG = "visual" { cdBarSIG = "tech" } else { cdBarSIG = "visual" }
        }    
        
        if (hh = 2) {
            if keyboard_check_pressed(vk_right) &amp;&amp; (w &lt; 3) {
                w += 1;
            }
            if keyboard_check_pressed(vk_left) &amp;&amp; (w &gt; -1) {
                w -= 1;
            }
        }
        
        if hh = 1 {
            if wSM = 0 { wSM = 1 } else { wSM = 0 }
        }    
            
          
        
    }
    
        if (wSM = 0) {
            if w = -1 { resSIG = string(window_get_width()) + " x " + string(window_get_height()) + "(current)"}
            if w = 0 { resSIG = "1920 x 1080 (16:9)"}
            if w = 1 { resSIG = "1280 x 720 (16:9)"}
            if w = 2 { resSIG = "960 x 540 (16:9)"}
            if w = 3 { resSIG = "640 x 320 (16:9)" }
        } else {
            resSIG = "Automatic (fullscreen mode)"
        }    
    
        if wSM = 0 { scModeSIG = "Borderless" } else { scModeSIG = "Fullscreen" }
    
    
        if (hh = -1) &amp;&amp; keyboard_check_pressed(vk_enter) {  
            if stBarSIG = "visual" { configStatsBar = 0 } else { configStatsBar = 1 }
            if genStatSIG = "visual" { configStatsInfo = 0 } else { configStatsInfo = 1 }
            if cdBarSIG = "visual" { configCDbar = 0 } else { configCDbar = 1 }
            if w = 0 { window_set_size(1920, 1080); wdisplay = 1920; hdisplay = 1080;}
            if w = 1 { window_set_size(1280, 720); wdisplay = 1280; hdisplay = 710;}
            if w = 2 { window_set_size(960, 540); wdisplay = 960; hdisplay = 540;}
            if w = 3 { window_set_size(640, 360); wdisplay = 640; hdisplay = 360;}
            if scModeSIG = "Borderless" { window_set_fullscreen(false) } else { window_set_fullscreen(true); w = -1; }
            if wSM = 0 { toCenter = 1; } 
            showPanelOk = 1;
        }
        
        if (hh = -2) &amp;&amp; keyboard_check_pressed(vk_enter) {
                showMainSettings = 0;
                showMainPause = 1;
                keyboard_clear(vk_enter);
                h = 6;       
        }
        
    } else {

        draw_set_alpha(0.7)
        draw_set_colour(c_white)
        draw_rectangle(x-230, y-100, x+230, y+50, false)
        draw_set_alpha(1);
    
    
        draw_set_color(c_maroon);
        draw_set_font(fnt_default12);
        draw_set_halign(fa_center);
        draw_set_valign(fa_center);
        draw_text(x,y-25,"Are the settings correct? #Yes (enter)   No(esc)#Configuration will be restarted in: " + string(round(sResConfigDef)) + " seconds")
        sResConfigDef -= 1/room_speed;
        if keyboard_check_pressed(vk_enter) {
         
            if window_get_fullscreen() { fullscreen = 1} else { fullscreen = 0 }
            //if saveConfig = 1 {
            if (file_exists("Config.sav")) file_delete("Config.sav");
            ini_open("Config.sav");
                ini_write_real("Screen Configuration","Resolution W",wdisplay);
                ini_write_real("Screen Configuration","Resolution H",hdisplay);
                ini_write_real("Screen Configuration","fullscreen",fullscreen);
            ini_close();
            if saveNum = 1 {
                ini_open("Save1.sav")
                ini_write_real("Profile","configStatsBar",global.configStatsBar);
                ini_write_real("Profile","configStatsInfo",global.configStatsInfo);
                ini_write_real("Profile","configCDbar",global.configCDbar); 
                ini_close()
            }
            if saveNum = 2 {
                ini_open("Save2.sav")
                ini_write_real("Profile","configStatsBar",global.configStatsBar);
                ini_write_real("Profile","configStatsInfo",global.configStatsInfo);
                ini_write_real("Profile","configCDbar",global.configCDbar); 
                ini_close()
            }
            if saveNum = 3 {
                ini_open("Save3.sav")
                ini_write_real("Profile","configStatsBar",global.configStatsBar);
                ini_write_real("Profile","configStatsInfo",global.configStatsInfo);
                ini_write_real("Profile","configCDbar",global.configCDbar); 
                ini_close()
            }
                saveConfig = 0;
            //}
            showPanelOk = 0 
        }
        
        if (keyboard_check_pressed(vk_escape)) || (sResConfigDef &lt;= 0) { 
            if (file_exists("Config.sav")) {
            
                ini_open("Config.sav")
                    global.fullscreen = ini_read_real("Screen Configuration","fullscreen",0)
                    global.wdisplay = ini_read_real("Screen Configuration","Resolution W",16)
                    global.hdisplay = ini_read_real("Screen Configuration","Resolution H",9)
                ini_close();
                
                window_set_size(wdisplay,hdisplay)
                if fullscreen = 0 { window_set_fullscreen(false) } else { window_set_fullscreen(true) }
            
            } else {
                window_set_size( display_get_width(), display_get_height() );
                globalvar wdisplay; wdisplay = display_get_width();
                globalvar hdisplay; hdisplay = display_get_height();
            }        
            toCenter = 1;
            showPanelOk = 0 
        }
        keyboard_clear(vk_enter)keyboard_clear(vk_escape)
    }
    
draw_set_halign(fa_bottom);
}







</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
