<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_test</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-15</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Start var 
EXP = 5;

hsp = 0;
vsp = 0;
acc = 0.005;
dir = -1;
changingDir = 0;
coll = 0;
timeChangeDir = 0.5+random(0.1); //Seconds to change dir
timingToChangeDir = 0;
maxVel = 0.3;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Particles
ps_exp = part_system_create();
part_system_depth(ps_exp,-15);

// Particle disapear           
        parDestr = part_type_create();
            part_type_shape(parDestr,pt_shape_disk);
            part_type_size(parDestr,0.01,0.02,0,0);
            part_type_colour2(parDestr,c_green,c_blue);
            part_type_speed(parDestr,.1,.2,.01,.01);            
            part_type_life(parDestr,25,55);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*

///Go to the player (1)
X = distance_to_object(obj_player);

timingToAutoDestroy += 1/120;
if (timingToAutoDestroy &gt;= autoDestroy) &amp;&amp; (startTimingDestroy = 0) {
    instance_destroy();
}


DisX = (obj_player.x - x);
DisY = -(obj_player.y - y);
if DisX != 0 {
    angle = (abs(DisY)/abs(DisX));
}
    

if x &gt; obj_player.x {
    if hsp &gt; -maxVel{
        hsp -= accX;
    }
} else {
    if vsp &lt; maxVel{
        hsp += accX;
    }
}

if y &lt; (obj_player.y-40) {
    if vsp &lt; maxVel{
        vsp += accY;
    }
} else {
    if vsp &gt; -maxVel{
        vsp -= accY;
    }
}

if X &lt; disStop { 
    if (DisX&gt;0) &amp;&amp; (DisY&gt;0) {angleRound = 0 + angle;}
    if (DisX&lt;0) &amp;&amp; (DisY&gt;0) {angleRound = 180 - angle;} 
    if (DisX&lt;0) &amp;&amp; (DisY&lt;0) {angleRound = 180 + angle;}
    if (DisX&gt;0) &amp;&amp; (DisY&lt;0) {angleRound = 360 - angle;}
    part_type_gravity(particleStandard,.5, angleRound);
    part_type_direction(particleStandard,angleRound-20,angleRound+20,40,10);
    part_particles_create(ps_exp,x,y,particleStandard,10) 
    startTimingDestroy = 1;
    if X &lt; 2{
        //Nothing
    } else {
        x += hsp/4;
        y += vsp/4;
    }    
} else {
    x += hsp;
    y += vsp;
    part_particles_create(ps_exp,x,y,particleStandard,10) 
}

if (startTimingDestroy = 1) { 
    timingDestroy += 1;
    if timingDestroy &gt;= maxLifePar { instance_destroy(); }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///UP-Down Movement

/*PAUSE GAME*/ if pause exit; /*END PAUSE GAME*/

timingToChangeDir += 1/120;

if (coll = 0) &amp;&amp; (!place_free(x,y+(vsp))) {
    vsp = -vsp;
    dir = -dir;
    coll = 1;
    timingToChangeDir = -timeChangeDir;
} 

if (coll = 1) &amp;&amp; (place_free(x,y+(vsp))) {
    coll = 0;
} 

if (timingToChangeDir &gt;= timeChangeDir) &amp;&amp; (changingDir = 0) {
    dir = -dir;
    changingDir = 1;
    timingToChangeDir = -timeChangeDir;    
}

if (vsp &lt; 1) &amp;&amp; (vsp &gt; -1) &amp;&amp; (changingDir = 1) {
    changingDir = 0;
}

if abs(vsp) &gt; maxVel {
    if vsp &gt; maxVel {
        vsp = maxVel;
    }
    if vsp &lt; -maxVel {
        vsp = -maxVel;
    }
} else {     
    vsp += acc*dir;
}

y += vsp;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Go to player

/*PAUSE GAME*/ if pause exit; /*END PAUSE GAME*/

if distance_to_object(obj_player) &lt; 50 {
    if x &gt; obj_player.x {
        hsp -= acc;
    } else {
        hsp += acc;
    }
    if y &gt; obj_player.y-40 {
        vsp -= acc;
    } else {
        vsp += acc;
    }
    if distance_to_object(obj_player) &lt; 7 {
        global.playerEXP += EXP;
        
        if (x-obj_player.x) != 0 {
        ang90 = abs(arctan((obj_player.y-y)/(obj_player.x+35-x)))*(180/pi);
            if (x &gt; obj_player.x) {
                if (y &lt; obj_player.y) {
                    angle360 = ang90;
                } else {
                    angle360 = 360-ang90;
                }
            } else {
                if (y &lt; obj_player.y) {
                    angle360 = 180-ang90;
                } else {
                    angle360 = 180+ang90;
                }
            }
        }        
        part_type_direction(parDestr,angle360-30,angle360+30,.2,.10);
        part_particles_create(ps_exp,x,y,parDestr,40)
        insD = 1;
        if insD = 1 { instance_destroy(); }
    }
} else {
    if hsp &gt; 0{
        hsp -= acc;
    }
    if hsp &lt; 0 {
        hsp += acc;
    }
}

x += hsp;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
