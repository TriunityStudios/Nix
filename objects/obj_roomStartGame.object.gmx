<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>globalvar saveNum; saveNum = 0;
globalvar showInitialPanel; showInitialPanel = 1;
globalvar readLang;

    //Screen
    ini_open("config/screen.ini")
        globalvar fullscreen; global.fullscreen = ini_read_real("Screen","fullscreen",0);
        globalvar wdisplay; global.wdisplay = ini_read_real("Screen","Resolution W",display_get_width());
        globalvar hdisplay; global.hdisplay = ini_read_real("Screen","Resolution H",display_get_height())
        if fullscreen = 0 { window_set_fullscreen(false) } else { window_set_fullscreen(true) }
        window_set_size(wdisplay,hdisplay)
    ini_close();
    
    //Controls
    ini_open("config/controls.ini")
        globalvar goRight_Key; global.goRight_Key = ini_read_real("Controls","goRight_Key",keyboard_get_map(vk_right))
        globalvar goLeft_Key; global.goLeft_Key = ini_read_real("Controls","goLeft_Key",keyboard_get_map(vk_left))
        globalvar goUp_Key; global.goUp_Key = ini_read_real("Controls","goUp_Key",keyboard_get_map(vk_up))
        globalvar goDown_Key; global.goDown_Key = ini_read_real("Controls","goDown_Key",keyboard_get_map(vk_down))
        globalvar sprint_Key; global.sprint_Key = ini_read_real("Controls","sprint_Key",keyboard_get_map(vk_lshift))
        globalvar jump_Key; global.jump_Key = ini_read_real("Controls","jump_Key",keyboard_get_map(vk_space))
        globalvar basAtt_Key; global.basAtt_Key = ini_read_real("Controls","basAtt_Key",keyboard_get_map(ord("W")))
        globalvar spin_Key; global.spin_Key = ini_read_real("Controls","spin_Key",keyboard_get_map(ord("A")))
        globalvar vDash_Key; global.vDash_Key = ini_read_real("Controls","vDash_Key",keyboard_get_map(ord("S")))
        globalvar hDash_Key; global.hDash_Key = ini_read_real("Controls","hDash_Key",keyboard_get_map(ord("D")))
        globalvar action1_Key; global.action1_Key = ini_read_real("Controls","action1_Key",keyboard_get_map(ord("E")))
        globalvar action2_Key; global.action2_Key = ini_read_real("Controls","action2_Key",keyboard_get_map(ord("F")))
    ini_close();
        
    //Sound
    ini_open("config/sound.ini")
        globalvar musicLvl; global.musicLvl = ini_read_real("Sound","musicLvl",0.6)
        globalvar FXsoundsLvl; global.FXsoundsLvl = ini_read_real("Sound","FXsoundsLvl",0.75)
        globalvar ambientSoundLvl; global.ambientSoundLvl = ini_read_real("Sound","ambientSoundLvl",0.5)
    ini_close();
    
    //Updates
    ini_open("config/updates.ini")
        globalvar autoStableUpdates; global.autoStableUpdates = ini_read_real("Updates","autoStableUpdates",1)
        globalvar autoTestUpdates; global.autoTestUpdates = ini_read_real("Updates","autoTestUpdates",0)
    ini_close();
    
    //Language
    ini_open("config/language.ini")
        globalvar lang; global.lang = ini_read_string("Language","lang","en_GB")
    ini_close();
    
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create all language packs
script_execute(lang_en_GB)
script_execute(lang_en_US)
script_execute(lang_es_AR)
script_execute(lang_es_MX)
script_execute(lang_es_ES)
script_execute(lang_es_UY)
script_execute(lang_es_VE)
script_execute(lang_ca_ES)
script_execute(lang_eu_ES)


//Load the language
script_execute(loadLang)
/*
if lang = "en_GB" { global.readLang = "lang/en_GB.lang" }
if lang = "es_ES" { global.readLang = "lang/es_ES.lang" }

if file_exists("lang/"+string(lang)+".lang") {
    global.play_text = "SUCCESS!!!!!!"
} else {
    global.play_text = "ERROR"
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Read version
/*
var result, evid;
evid = ds_map_find_value(async_load, "id");

switch (evid) {
    case async_ini:
        result = ds_map_find_value(async_load, "result");
        file = file_text_open_write( "version.ini" );// You can use any filename, but for the sake of simplicity..
        file_text_write_string(file, result);
        file_text_close(file);
        alarm[0] = 10;
        break;
}

ini_open("config.ini");
    str = ini_read_string("version","number","");
ini_close();
*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Go to menu

if !window_get_fullscreen(){
    window_center();
}

room_goto(room_menu);
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
