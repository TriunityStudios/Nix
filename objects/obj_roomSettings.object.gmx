<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-99</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x= view_wview/2
y= view_hview/2

h = 0;
w0 = -1;
if window_get_fullscreen() { w1 = 1} else { w1 = 0 }

reh1 = 1;

showPanelOk = 0;
saveConfig = 0;
sResConfigDef = 15;

toCenter = 0;
timingToCenter = 0; 

changeControl = 0;


/////////////////////////
if file_exists("version"){
    ini_open("version")
        global.CV = ini_read_real("StableVersion","currentStableVersion",0)
        global.DateStableVersion = ini_read_string("StableVersion","DateStableVersion","")
        global.currentTestVersion = ini_read_string("TestVersion","currentTestVersion","")
        global.DateTestVersion = ini_read_string("TestVersion","DateTestVersion","")
    
        global.testDw = ini_read_real("Stats - Horizontal Dash","playerCritickDamageHDash",0)
    
    ini_close();
}



//Choose section
    i = 0;
graphicSettings = 0;
    gi = 0;
controlsSetings = 0;
    ci = 0;
soundSettings = 0;
    si = 0;
updatesSettings = 0;
    ui = 0;
languageSettings = 0;
    li = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Fast scroll
    //Sound
if soundSettings = 1 {
    if keyboard_check(vk_left) {
        if (si = 0) &amp;&amp; musicLvl &gt; 0 { musicLvl -= 0.01; }
        if (si = 1) &amp;&amp; FXsoundsLvl &gt; 0 { FXsoundsLvl -= 0.01; }
        if (si = 2) &amp;&amp; ambientSoundLvl &gt; 0 { ambientSoundLvl -= 0.01; }
    }
    if keyboard_check(vk_right) {
        if (si = 0) &amp;&amp; musicLvl &lt; 1 { musicLvl += 0.01; }
        if (si = 1) &amp;&amp; FXsoundsLvl &lt; 1 { FXsoundsLvl += 0.01; }
        if (si = 2) &amp;&amp; ambientSoundLvl &lt; 1 { ambientSoundLvl += 0.01; }    
    }
    audio_sound_gain(music_menu, musicLvl, 0)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Center Screen    
    if toCenter = 1 {
        timingToCenter += 1/room_speed;
        if timingToCenter &gt;= (1/(room_speed-10)) {
            window_center();
            timingToCenter = 0;
            toCenter = 0;
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Return to the menu with ESC
if keyboard_check_pressed(vk_escape) { 
    if graphicSettings = 0 &amp;&amp; soundSettings = 0 &amp;&amp; updatesSettings = 0 &amp;&amp; controlsSetings = 0 &amp;&amp; languageSettings = 0 {
        room_goto(room_menu);
    } else {
        if graphicSettings = 1 &amp;&amp; showPanelOk = 0 { graphicSettings = 0; } 
        if controlsSetings = 1 &amp;&amp; changeControl = 0 { panelEescControls = 1; }
        if soundSettings = 1 { soundSettings = 0; }
        if updatesSettings = 1 { updatesSettings = 0; }
        if languageSettings = 1 { languageSettings = 0; }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Press F3 to view all info (disabled)
/*
x= view_xview[view_current] + (view_wview[0]/2);
y= view_yview[view_current] + (15);

if showPanelOk = 0 {
    draw_set_alpha(0.7);
    draw_set_color(c_gray);
    draw_set_font(fnt_default9);
    draw_set_halign(fa_center);
    
    draw_set_font(fnt_default12);
    draw_text(x,y,"Press F3 to view all the information #(In-game included)");
    
    draw_set_alpha(1);    
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Main menu settings
if graphicSettings = 0 &amp;&amp; soundSettings = 0 &amp;&amp; updatesSettings = 0 &amp;&amp; controlsSetings = 0 &amp;&amp; languageSettings = 0{
    x= view_wview/2
    y= view_hview/2

    draw_set_color(c_dkgray);
    draw_set_font(fnt_default_24);
    draw_set_halign(fa_center);
    draw_set_valign(fa_center);
    
    draw_text(x,y-75,"Settings")    
            
    draw_set_color(c_dkgray);
    draw_set_font(fnt_default12);
    draw_set_halign(fa_center);
    draw_set_valign(fa_center);
    
    draw_text(x,y+15*i,"&gt;                        ")
    draw_text(x,y+15*0,"Graphics")
    draw_text(x,y+15*1,"Controls")
    draw_text(x,y+15*2,"Sound")
    draw_text(x,y+15*3,"Updates")
    draw_text(x,y+15*4,"Language")
    draw_text(x,y+15*5,"QUIT")

    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
    
    if keyboard_check_pressed(vk_up) &amp;&amp; i &gt; 0{
        i -= 1;
    }
    if keyboard_check_pressed(vk_down) &amp;&amp; i &lt; 5{
        i += 1;
    }
    
    if (keyboard_check_pressed(vk_enter)) {
        if (i = 0){ graphicSettings = 1; }
        if (i = 1){ controlsSetings = 1; }
        if (i = 2){ soundSettings = 1; }
        if (i = 3){ updatesSettings = 1; }
        if (i = 4){ languageSettings = 1; }
        if (i = 5){ room_goto(room_menu) }
        keyboard_clear(vk_enter)
    }
} 
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Graphic Settings
x= view_wview/2
y= view_hview/2
if graphicSettings = 1 {
    if showPanelOk = 0 {
        if (h &lt; 3) &amp;&amp; (keyboard_check_pressed(vk_down)) { h += 1; }
        if (h &gt; 0) &amp;&amp; (keyboard_check_pressed(vk_up)) { h -= 1; }
        if (h = 0) &amp;&amp; (w0 &lt; 3) &amp;&amp; (w1 = 0) &amp;&amp; (keyboard_check_pressed(vk_right)) { w0 += 1; }
        if (h = 0) &amp;&amp; (w0 &gt; -1) &amp;&amp; (w1 = 0) &amp;&amp; (keyboard_check_pressed(vk_left)) { w0 -= 1; }
        if (h = 1) &amp;&amp; (w1 &lt; 1) &amp;&amp; (keyboard_check_pressed(vk_right)) { w1 += 1; }
        if (h = 1) &amp;&amp; (w1 &gt; 0) &amp;&amp; (keyboard_check_pressed(vk_left)) { w1 -= 1; }
        if (h = 1) &amp;&amp; (w1 = 0) &amp;&amp; (keyboard_check_pressed(vk_enter)) &amp;&amp; (reh1 = 1) { w1 = 1; reh1 = 0; }
        if (h = 1) &amp;&amp; (keyboard_check_released(vk_enter)) &amp;&amp; (reh1 = 0) { reh1 = 1; }
        if (h = 1) &amp;&amp; (w1 = 1) &amp;&amp; (keyboard_check_pressed(vk_enter)) &amp;&amp; (reh1 = 1) { w1 = 0; reh1 = 0; }
        
        if h = 0 { alphah0 = 1 } else { alphah0 = 0.7 }
        if h = 1 { alphah1 = 1 } else { alphah1 = 0.7 }
        if h = 2 { alphah2 = 1 } else { alphah2 = 0.7 }
        if h = 3 { alphah3 = 1 } else { alphah3 = 0.7 }
        
        if (h = 2) &amp;&amp; (keyboard_check_pressed(vk_enter)) {
            if w0 = 0 { window_set_size(window_get_width(), window_get_height()) }
            if w0 = 0 { window_set_size(1920, 1080); wdisplay = 1920; hdisplay = 1080;}
            if w0 = 1 { window_set_size(1280, 720); wdisplay = 1280; hdisplay = 720;}
            if w0 = 2 { window_set_size(960, 540); wdisplay = 960; hdisplay = 540;}
            if w0 = 3 { window_set_size(640, 360); wdisplay = 640; hdisplay = 360;}
            if w1 = 0 { window_set_fullscreen(false); toCenter = 1; } else {window_set_fullscreen(true) }
            showPanelOk = 1;
        }
        if (h = 3) &amp;&amp; (keyboard_check_pressed(vk_enter)) {
            graphicSettings = 0;
        }
        
        draw_set_color(c_black);
        draw_set_font(fnt_default12);
        draw_set_halign(fa_center);
        draw_set_valign(fa_center);
        
        if w1 = 1{
            draw_set_alpha(0.7);
            draw_text(x,y-15*2,"ATUTOMATIC#-------------------------------");
        }
        
        if h = 0 &amp;&amp; w0 = -1 {
            draw_set_alpha(alphah0);
            draw_text(x,y+20*-1,string(window_get_width()) + " x " + string(window_get_height()) + " (current)");
        } else {
            if w0 = -1 {
                draw_set_alpha(alphah0);
                draw_text(x,y+20*-1,string(window_get_width()) + " x " + string(window_get_height()) + " (current)");     
            }
        }
        
        if h = 0 &amp;&amp; w0 = 0 &amp;&amp; w1 = 0{
            draw_set_alpha(alphah0);
            draw_text(x,y+20*-1,"1920 x 1080 (16:9)");
        } else {
            if w0 = 0 {
                draw_set_alpha(alphah0);
                draw_text(x,y+20*-1,"1920 x 1080 (16:9)");        
            }
        }
        
        if h = 0 &amp;&amp; w0 = 1 &amp;&amp; w1 = 0{
            draw_set_alpha(alphah0);
            draw_text(x,y+20*-1,"1280 x 720 (16:9)");
        } else {
            if w0 = 1 {
                draw_set_alpha(alphah0);
                draw_text(x,y+20*-1,"1280 x 720 (16:9)");        
            }
        }
        
        if h = 0 &amp;&amp; w0 = 2 &amp;&amp; w1 = 0{
            draw_set_alpha(alphah0);
            draw_text(x,y+20*-1,"960 x 540 (16:9)");
        } else {
            if w0 = 2 {
                draw_set_alpha(alphah0);
                draw_text(x,y+20*-1,"960 x 540 (16:9)");        
            }
        }
        
        if h = 0 &amp;&amp; w0 = 3 &amp;&amp; w1 = 0{
            draw_set_alpha(alphah0);
            draw_text(x,y+20*-1,"640 x 320 (16:9)");
        } else {
            if w0 = 3 {
                draw_set_alpha(alphah0);
                draw_text(x,y+20*-1,"640 x 320 (16:9)");        
            }
        }
        
        if h = 1 &amp;&amp; w1 = 0{
            draw_set_alpha(alphah1);
            draw_text(x,y+20*0,"FULLSCREEN OFF");
        } else {
            if w1 = 0 {
                draw_set_alpha(alphah1);
                draw_text(x,y+20*0,"FULLSCREEN OFF");
            }
        }
        
        if h = 1 &amp;&amp; w1 = 1{
            draw_set_alpha(alphah1);
            draw_text(x,y+20*0,"FULLSCREEN ON");
        } else {
            if w1 = 1 {
                draw_set_alpha(alphah1);
                draw_text(x,y+20*0,"FULLSCREEN ON");
            }
        }
        
        if h = 2 {
            draw_set_alpha(alphah2);
            draw_text(x,y+39,"APPLY");
        } else {
            draw_set_alpha(alphah2);
            draw_text(x,y+20*2,"APPLY");
        }
        
        if h = 3 {
            draw_set_alpha(alphah3);
            draw_text(x,y+59,"BACK");
        } else {
            draw_set_alpha(alphah3);
            draw_text(x,y+20*3,"BACK");
        }
        
        draw_set_valign(fa_top);
        
    } else {
    
        draw_set_color(c_maroon);
        draw_set_font(fnt_default12);
        draw_set_halign(fa_center);
        draw_set_valign(fa_center);
        draw_text(x,y,"Are the settings correct? #Yes (enter)   No(esc)#Configuration will be restarted in: " + string(round(sResConfigDef)) + " seconds")
        sResConfigDef -= 1/room_speed;
        if keyboard_check_pressed(vk_enter) {
         
            if window_get_fullscreen() { fullscreen = 1} else { fullscreen = 0 }
            //if saveConfig = 1 {
            if (file_exists("config/screen.ini")) file_delete("config/screen.ini");
            ini_open("config/screen.ini");
                ini_write_real("Screen","Resolution W",wdisplay);
                ini_write_real("Screen","Resolution H",hdisplay);
                ini_write_real("Screen","fullscreen",fullscreen);
            ini_close();
            saveConfig = 0;
            //}
            showPanelOk = 0 
        }
        
        if (keyboard_check_pressed(vk_escape)) || (sResConfigDef &lt;= 0) { 
            if (file_exists("config/screen.ini")) {
            
                ini_open("config/screen.ini")
                    global.fullscreen = ini_read_real("Screen","fullscreen",0)
                    global.wdisplay = ini_read_real("Screen","Resolution W",16)
                    global.hdisplay = ini_read_real("Screen","Resolution H",9)
                ini_close();
                
                window_set_size(wdisplay,hdisplay)
                if fullscreen = 0 { window_set_fullscreen(false) } else { window_set_fullscreen(true) }
            
            } else {
                window_set_size( display_get_width(), display_get_height() );
                globalvar wdisplay; wdisplay = display_get_width();
                globalvar hdisplay; hdisplay = display_get_height();
            }        
            toCenter = 1;
            showPanelOk = 0 
        }
        keyboard_clear(vk_enter)keyboard_clear(vk_escape)
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Controls settings
if controlsSetings = 1 {
    x= view_wview/2
    y= view_hview/2-75
    
    if changeControl = 0 {
    
    map_vk_right = keyboard_get_map(vk_right)
    map_vk_left = keyboard_get_map(vk_left)
    map_vk_up = keyboard_get_map(vk_up)
    map_vk_down = keyboard_get_map(vk_down)
    map_vk_lshift = keyboard_get_map(vk_lshift)
    map_vk_rshift = keyboard_get_map(vk_rshift)
    map_vk_space = keyboard_get_map(vk_space)
    map_vk_enter = keyboard_get_map(vk_enter)
    
        ////Set strings names
        switch goRight_Key {
            case map_vk_right:
                string_goRight_Key = "Right";
            break;
            case map_vk_left:
                string_goRight_Key = "Left";
            break;
            case map_vk_up:
                string_goRight_Key = "Up";
            break;
            case map_vk_down:
                string_goRight_Key = "Down";
            break;
            case map_vk_lshift:
                string_goRight_Key = "lShift"
            break;
            case map_vk_rshift:
                string_goRight_Key = "rShift"
            break;
            case map_vk_space:
                string_goRight_Key = "Space";
            break;
            case map_vk_enter:
                string_goRight_Key = "Enter";
            break;   
            default:
                var string_goRight_Key = chr(global.goRight_Key);
        }
        switch goLeft_Key {
            case map_vk_right:
                string_goLeft_Key = "Right";
            break;
            case map_vk_left:
                string_goLeft_Key = "Left";
            break;
            case map_vk_up:
                string_goLeft_Key = "Up";
            break;
            case map_vk_down:
                string_goLeft_Key = "Down";
            break;
            case map_vk_lshift:
                string_goLeft_Key = "lShift"
            break;
            case map_vk_rshift:
                string_goLeft_Key = "rShift"
            break;
            case map_vk_space:
                string_goLeft_Key = "Space";
            break;
            case map_vk_enter:
                string_goLeft_Key = "Enter";
            break;   
            default:
                var string_goLeft_Key = chr(global.goLeft_Key);
        }
        switch goUp_Key {
            case map_vk_right:
                string_goUp_Key = "Right";
            break;
            case map_vk_left:
                string_goUp_Key = "Left";
            break;
            case map_vk_up:
                string_goUp_Key = "Up";
            break;
            case map_vk_down:
                string_goUp_Key = "Down";
            break;
            case map_vk_lshift:
                string_goUp_Key = "lShift"
            break;
            case map_vk_rshift:
                string_goUp_Key = "rShift"
            break;
            case map_vk_space:
                string_goUp_Key = "Space";
            break;
            case map_vk_enter:
                string_goUp_Key = "Enter";
            break;   
            default:
                var string_goUp_Key = chr(global.goUp_Key);
        }
        switch goDown_Key {
            case map_vk_right:
                string_goDown_Key = "Right";
            break;
            case map_vk_left:
                string_goDown_Key = "Left";
            break;
            case map_vk_up:
                string_goDown_Key = "Up";
            break;
            case map_vk_down:
                string_goDown_Key = "Down";
            break;
            case map_vk_lshift:
                string_goDown_Key = "lShift"
            break;
            case map_vk_rshift:
                string_goDown_Key = "rShift"
            break;
            case map_vk_space:
                string_goDown_Key = "Space";
            break;
            case map_vk_enter:
                string_goDown_Key = "Enter";
            break;   
            default:
                var string_goDown_Key = chr(global.goDown_Key);
        }
        switch sprint_Key {
            case map_vk_right:
                string_sprint_Key = "Right";
            break;
            case map_vk_left:
                string_sprint_Key = "Left";
            break;
            case map_vk_up:
                string_sprint_Key = "Up";
            break;
            case map_vk_down:
                string_sprint_Key = "Down";
            break;
            case map_vk_lshift:
                string_sprint_Key = "lShift"
            break;
            case map_vk_rshift:
                string_sprint_Key = "rShift"
            break;
            case map_vk_space:
                string_sprint_Key = "Space";
            break;
            case map_vk_enter:
                string_sprint_Key = "Enter";
            break;   
            default:
                var string_sprint_Key = chr(global.sprint_Key);
        }
        switch jump_Key {
            case map_vk_right:
                string_jump_Key = "Right";
            break;
            case map_vk_left:
                string_jump_Key = "Left";
            break;
            case map_vk_up:
                string_jump_Key = "Up";
            break;
            case map_vk_down:
                string_jump_Key = "Down";
            break;
            case map_vk_lshift:
                string_jump_Key = "lShift"
            break;
            case map_vk_rshift:
                string_jump_Key = "rShift"
            break;
            case map_vk_space:
                string_jump_Key = "Space";
            break;
            case map_vk_enter:
                string_jump_Key = "Enter";
            break;   
            default:
                var string_jump_Key = chr(global.jump_Key);
        }
        switch basAtt_Key {
            case map_vk_right:
                string_basAtt_Key = "Right";
            break;
            case map_vk_left:
                string_basAtt_Key = "Left";
            break;
            case map_vk_up:
                string_basAtt_Key = "Up";
            break;
            case map_vk_down:
                string_basAtt_Key = "Down";
            break;
            case map_vk_lshift:
                string_basAtt_Key = "lShift"
            break;
            case map_vk_rshift:
                string_basAtt_Key = "rShift"
            break;
            case map_vk_space:
                string_basAtt_Key = "Space";
            break;
            case map_vk_enter:
                string_basAtt_Key = "Enter";
            break;   
            default:
                var string_basAtt_Key = chr(global.basAtt_Key);
        }
        switch spin_Key {
            case map_vk_right:
                string_spin_Key = "Right";
            break;
            case map_vk_left:
                string_spin_Key = "Left";
            break;
            case map_vk_up:
                string_spin_Key = "Up";
            break;
            case map_vk_down:
                string_spin_Key = "Down";
            break;
            case map_vk_lshift:
                string_spin_Key = "lShift"
            break;
            case map_vk_rshift:
                string_spin_Key = "rShift"
            break;
            case map_vk_space:
                string_spin_Key = "Space";
            break;
            case map_vk_enter:
                string_spin_Key = "Enter";
            break;   
            default:
                var string_spin_Key = chr(global.spin_Key);
        }
        switch vDash_Key {
            case map_vk_right:
                string_vDash_Key = "Right";
            break;
            case map_vk_left:
                string_vDash_Key = "Left";
            break;
            case map_vk_up:
                string_vDash_Key = "Up";
            break;
            case map_vk_down:
                string_vDash_Key = "Down";
            break;
            case map_vk_lshift:
                string_vDash_Key = "lShift"
            break;
            case map_vk_rshift:
                string_vDash_Key = "rShift"
            break;
            case map_vk_space:
                string_vDash_Key = "Space";
            break;
            case map_vk_enter:
                string_vDash_Key = "Enter";
            break;   
            default:
                var string_vDash_Key = chr(global.vDash_Key);
        }
        switch hDash_Key {
            case map_vk_right:
                string_hDash_Key = "Right";
            break;
            case map_vk_left:
                string_hDash_Key = "Left";
            break;
            case map_vk_up:
                string_hDash_Key = "Up";
            break;
            case map_vk_down:
                string_hDash_Key = "Down";
            break;
            case map_vk_lshift:
                string_hDash_Key = "lShift"
            break;
            case map_vk_rshift:
                string_hDash_Key = "rShift"
            break;
            case map_vk_space:
                string_hDash_Key = "Space";
            break;
            case map_vk_enter:
                string_hDash_Key = "Enter";
            break;   
            default:
                var string_hDash_Key = chr(global.hDash_Key);
        }
        switch action1_Key {
            case map_vk_right:
                string_action1_Key = "Right";
            break;
            case map_vk_left:
                string_action1_Key = "Left";
            break;
            case map_vk_up:
                string_action1_Key = "Up";
            break;
            case map_vk_down:
                string_action1_Key = "Down";
            break;
            case map_vk_lshift:
                string_action1_Key = "lShift"
            break;
            case map_vk_rshift:
                string_action1_Key = "rShift"
            break;
            case map_vk_space:
                string_action1_Key = "Space";
            break;
            case map_vk_enter:
                string_action1_Key = "Enter";
            break;   
            default:
                var string_action1_Key = chr(global.action1_Key);
        }
        switch action2_Key {
            case map_vk_right:
                string_action2_Key = "Right";
            break;
            case map_vk_left:
                string_action2_Key = "Left";
            break;
            case map_vk_up:
                string_action2_Key = "Up";
            break;
            case map_vk_down:
                string_action2_Key = "Down";
            break;
            case map_vk_lshift:
                string_action2_Key = "lShift"
            break;
            case map_vk_rshift:
                string_action2_Key = "rShift"
            break;
            case map_vk_space:
                string_action2_Key = "Space";
            break;
            case map_vk_enter:
                string_action2_Key = "Enter";
            break;   
            default:
                var string_action2_Key = chr(global.action2_Key);
        }
        ////END set strings
    
    
    
    
    
        draw_set_color(c_dkgray);
        draw_set_font(fnt_default_24);
        draw_set_halign(fa_center);
        draw_set_valign(fa_center);
        
        draw_text(x,y-50,"Controls")    
                
        draw_set_color(c_dkgray);
        draw_set_font(fnt_default12);
        draw_set_halign(fa_left);
        draw_set_valign(fa_center);
        
        draw_text(x-100,y+15*ci,"&gt;")
        draw_text(x-75,y+15*0,"Go Right: " + string((string_goRight_Key)))
        draw_text(x-75,y+15*1,"Go Left: " + string((string_goLeft_Key)))
        draw_text(x-75,y+15*2,"Go Up: " + string((string_goUp_Key)))
        draw_text(x-75,y+15*3,"Go Down: " + string((string_goDown_Key)))
        draw_text(x-75,y+15*4,"Sprint: " + string((string_sprint_Key)))
        draw_text(x-75,y+15*5,"Jump: " + string((string_jump_Key)))
        draw_text(x-75,y+15*6,"Basic Attack: " + string((string_basAtt_Key)))
        draw_text(x-75,y+15*7,"Spin: " + string((string_spin_Key)))
        draw_text(x-75,y+15*8,"Vertical Dash: " + string((string_vDash_Key)))
        draw_text(x-75,y+15*9,"Horizontal Dash: " + string((string_hDash_Key)))
        draw_text(x-75,y+15*10,"Action 1: " + string((string_action1_Key)))
        draw_text(x-75,y+15*11,"Action 2: " + string((string_action2_Key)))
        draw_text(x-75,y+15*12,"RESSET")
        draw_text(x-75,y+15*13,"APPLY")
        draw_text(x-75,y+15*14,"QUIT")
        
        draw_set_halign(fa_left);
        draw_set_valign(fa_top);
        
        if keyboard_check_pressed(vk_up) &amp;&amp; ci &gt; 0 {
            ci -= 1;
        }
        if keyboard_check_pressed(vk_down) &amp;&amp; ci &lt; 14 {
            ci += 1;
        }
        
        if (keyboard_check_pressed(vk_enter)) {
            switch ci {
            
                case 12:
                    ini_open("config/controls.ini")
                        ini_section_delete("Controls")
                        globalvar goRight_Key; global.goRight_Key = keyboard_get_map(vk_right)
                        globalvar goLeft_Key; global.goLeft_Key = keyboard_get_map(vk_left)
                        globalvar goUp_Key; global.goUp_Key = keyboard_get_map(vk_up)
                        globalvar goDown_Key; global.goDown_Key = keyboard_get_map(vk_down)
                        globalvar sprint_Key; global.sprint_Key = keyboard_get_map(vk_lshift)
                        globalvar jump_Key; global.jump_Key = keyboard_get_map(vk_space)   
                        globalvar basAtt_Key; global.basAtt_Key = keyboard_get_map(ord("W"))
                        globalvar spin_Key; global.spin_Key = keyboard_get_map(ord("A"))
                        globalvar vDash_Key; global.vDash_Key = keyboard_get_map(ord("S"))
                        globalvar hDash_Key; global.hDash_Key = keyboard_get_map(ord("D"))
                        globalvar action1_Key; global.action1_Key = keyboard_get_map(ord("E"))
                        globalvar action2_Key; global.action2_Key = keyboard_get_map(ord("F"))
                    ini_close();
                break;
                
                case 13:
                    ini_open("config/controls.ini")
                        ini_write_real("Controls","goRight_Key",goRight_Key)
                        ini_write_real("Controls","goLeft_Key",goLeft_Key)
                        ini_write_real("Controls","goUp_Key",goUp_Key)
                        ini_write_real("Controls","goDown_Key",goDown_Key)
                        ini_write_real("Controls","sprint_Key",sprint_Key)
                        ini_write_real("Controls","jump_Key",jump_Key)
                        ini_write_real("Controls","basAtt_Key",basAtt_Key)
                        ini_write_real("Controls","spin_Key",spin_Key)
                        ini_write_real("Controls","vDash_Key",vDash_Key)
                        ini_write_real("Controls","hDash_Key",hDash_Key)
                        ini_write_real("Controls","action1_Key",action1_Key)
                        ini_write_real("Controls","action2_Key",action2_Key)                
                    ini_close();
                break;
                
                case 14:
                    ini_open("config/controls.ini")
                        globalvar goRight_Key; global.goRight_Key = ini_read_real("Controls","goRight_Key",keyboard_get_map(vk_right))
                        globalvar goLeft_Key; global.goLeft_Key = ini_read_real("Controls","goLeft_Key",keyboard_get_map(vk_left))
                        globalvar goUp_Key; global.goUp_Key = ini_read_real("Controls","goUp_Key",keyboard_get_map(vk_up))
                        globalvar goDown_Key; global.goDown_Key = ini_read_real("Controls","goDown_Key",keyboard_get_map(vk_down))
                        globalvar sprint_Key; global.sprint_Key = ini_read_real("Controls","sprint_Key",keyboard_get_map(vk_lshift))
                        globalvar jump_Key; global.jump_Key = ini_read_real("Controls","jump_Key",keyboard_get_map(vk_space))
                        globalvar basAtt_Key; global.basAtt_Key = ini_read_real("Controls","basAtt_Key",keyboard_get_map(ord("W")))
                        globalvar spin_Key; global.spin_Key = ini_read_real("Controls","spin_Key",keyboard_get_map(ord("A")))
                        globalvar vDash_Key; global.vDash_Key = ini_read_real("Controls","vDash_Key",keyboard_get_map(ord("S")))
                        globalvar hDash_Key; global.hDash_Key = ini_read_real("Controls","hDash_Key",keyboard_get_map(ord("D")))
                        globalvar action1_Key; global.action1_Key = ini_read_real("Controls","action1_Key",keyboard_get_map(ord("E")))
                        globalvar action2_Key; global.action2_Key = ini_read_real("Controls","action2_Key",keyboard_get_map(ord("F")))
                    ini_close();                    
                    controlsSetings = 0 
                break;
                default: changeControl = 1; io_clear();
            }
        }   
        if keyboard_check_pressed(vk_escape) {
            controlsSetings = 0;
        }
    } 
    
    if changeControl = 1 {
        draw_set_color(c_dkgray);
        draw_set_font(fnt_default12);
        draw_set_halign(fa_center);
        draw_set_valign(fa_center);
        draw_text(x,y,"Choose a new key")

        if keyboard_check_pressed(vk_anykey) {
            if keyboard_check_pressed(vk_escape) {
                changeControl = 0;
            } else {
                switch ci {
                    case 0: goRight_Key = keyboard_get_map(keyboard_lastkey); changeControl = 0; break;
                    case 1: goLeft_Key = keyboard_get_map(keyboard_lastkey); changeControl = 0; break;
                    case 2: goUp_Key = keyboard_get_map(keyboard_lastkey); changeControl = 0; break;
                    case 3: goDown_Key = keyboard_get_map(keyboard_lastkey); changeControl = 0; break;
                    case 4: sprint_Key = keyboard_get_map(keyboard_lastkey); changeControl = 0; break;
                    case 5: jump_Key = keyboard_get_map(keyboard_lastkey); changeControl = 0; break;
                    case 6: basAtt_Key = keyboard_get_map(keyboard_lastkey); changeControl = 0; break;
                    case 7: spin_Key = keyboard_get_map(keyboard_lastkey); changeControl = 0; break;
                    case 8: vDash_Key = keyboard_get_map(keyboard_lastkey); changeControl = 0; break;
                    case 9: hDash_Key = keyboard_get_map(keyboard_lastkey); changeControl = 0; break;
                    case 10: action1_Key = keyboard_get_map(keyboard_lastkey); changeControl = 0; break;
                    case 11: action2_Key = keyboard_get_map(keyboard_lastkey); changeControl = 0; break;
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sound Settings
if soundSettings = 1 {
    x= view_wview/2
    y= view_hview/2

    draw_set_color(c_dkgray);
    draw_set_font(fnt_default_24);
    draw_set_halign(fa_center);
    draw_set_valign(fa_center);
    
    draw_text(x,y-75,"Sound")    
            
    draw_set_color(c_dkgray);
    draw_set_font(fnt_default12);
    draw_set_halign(fa_center);
    draw_set_valign(fa_center);
    
    draw_text(x,y+15*si ,"&gt;                                    ")
    draw_text(x,y+15*0,"Music: " + string(round(musicLvl*100)) + "%")
    draw_text(x,y+15*1,"FX: " + string(round(FXsoundsLvl*100)) + "&amp;")
    draw_text(x,y+15*2,"Ambient: " + string(round(ambientSoundLvl*100)) + "%")
    draw_text(x,y+15*3,"RESSET")
    draw_text(x,y+15*4,"APPLY")
    draw_text(x,y+15*5,"QUIT")

    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
    
    if keyboard_check_pressed(vk_up) &amp;&amp; si &gt; 0{
        si -= 1;
    }
    if keyboard_check_pressed(vk_down) &amp;&amp; si &lt; 5{
        si += 1;
    }
    
    if keyboard_check(vk_left) || keyboard_check(vk_right) {
        if (alarm[0] = -1) { alarm[0]=5 }      
    }  
    
    if keyboard_check_pressed(vk_enter) {
        if (si = 3) { 
        ini_open("config/sound.ini")
            ini_section_delete("Sound");
            globalvar musicLvl; global.musicLvl = ini_read_real("Sound","musicLvl",0.6)
            globalvar FXsoundsLvl; global.FXsoundsLvl = ini_read_real("Sound","FXsoundsLvl",0.75)
            globalvar ambientSoundLvl; global.ambientSoundLvl = ini_read_real("Sound","ambientSoundLvl",0.5)
        ini_close();           
        audio_sound_gain(music_menu, musicLvl, 0); 
        }
        
        if (si = 4) { 
        ini_open("config/sound.ini")
            ini_write_real("Sound","musicLvl",musicLvl)
            ini_write_real("Sound","FXsoundsLvl",FXsoundsLvl)
            ini_write_real("Sound","ambientSoundLvl",ambientSoundLvl)
        ini_close();             
        audio_sound_gain(music_menu, musicLvl, 0);
        }
        
        if (si = 5) { 
        ini_open("config/sound.ini")
            globalvar musicLvl; global.musicLvl = ini_read_real("Sound","musicLvl",0.6)
            globalvar FXsoundsLvl; global.FXsoundsLvl = ini_read_real("Sound","FXsoundsLvl",0.75)
            globalvar ambientSoundLvl; global.ambientSoundLvl = ini_read_real("Sound","ambientSoundLvl",0.5)
        ini_close();
        audio_sound_gain(music_menu, musicLvl, 0);
        soundSettings = 0;
        }
        keyboard_clear(vk_enter)
    }   
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Updates Settings
if updatesSettings = 1 {

    if autoStableUpdates = 1 { string_autoStableUpdates = "ON" } else { string_autoStableUpdates = "OFF" }
    if autoTestUpdates = 1 { string_autoTestUpdates = "ON" } else { string_autoTestUpdates = "OFF" }

    draw_set_color(c_dkgray);
    draw_set_font(fnt_default_24);
    draw_set_halign(fa_center);
    draw_set_valign(fa_center);
    
    draw_text(x,y-50,"Updates")    
            
    draw_set_color(c_dkgray);
    draw_set_font(fnt_default12);
    draw_set_halign(fa_center);
    draw_set_valign(fa_center);
    
    draw_text(x-100,y+15*ui,"&gt;")
    draw_text(x,y+15*0,"Stable Updates:  " + string((string_autoStableUpdates)))
    draw_text(x,y+15*1,"Test Updates:  " + string((string_autoTestUpdates)))
    draw_text(x,y+15*2,"RESSET")
    draw_text(x,y+15*3,"APPLY")
    draw_text(x,y+15*4,"QUIT")      
        
        
    if keyboard_check_pressed(vk_up) &amp;&amp; ui &gt; 0 {
        ui -= 1;
    }
    if keyboard_check_pressed(vk_down) &amp;&amp; ui &lt; 4 {
        ui += 1;
    }        

    if keyboard_check_pressed(vk_right) {
        if ui = 0 { if autoStableUpdates = 0 { autoStableUpdates = 1 } }
        if ui = 1 { if autoTestUpdates = 0 { autoTestUpdates = 1 } }
    }
    if keyboard_check_pressed(vk_left) {
        if ui = 0 { if autoStableUpdates = 1 { autoStableUpdates = 0 } }
        if ui = 1 { if autoTestUpdates = 1 { autoTestUpdates = 0 } }
    }
        
    if keyboard_check_pressed(vk_enter) {
        switch ui {
            case 0:
                if autoStableUpdates = 1 { autoStableUpdates = 0 } else { autoStableUpdates = 1 }
            break;
            case 1:
                if autoTestUpdates = 1 { autoTestUpdates = 0 } else { autoTestUpdates = 1 }
            break;
            case 2: 
                ini_open("config/updates.ini")
                    ini_section_delete("Updates")
                    globalvar autoStableUpdates; global.autoStableUpdates = ini_read_real("Updates","autoStableUpdates",1)
                    globalvar autoTestUpdates; global.autoTestUpdates = ini_read_real("Updates","autoTestUpdates",0)
                ini_close();            
            break;
            case 3: 
                ini_open("config/updates.ini")
                    ini_write_real("Updates","autoStableUpdates",autoStableUpdates)
                    ini_write_real("Updates","autoTestUpdates",autoStableUpdates)
                ini_close();                 
            break;            
            case 4: 
                ini_open("config/updates.ini")
                    globalvar autoStableUpdates; global.autoStableUpdates = ini_read_real("Updates","autoStableUpdates",1)
                    globalvar autoTestUpdates; global.autoTestUpdates = ini_read_real("Updates","autoTestUpdates",0)
                ini_close();
                updatesSettings = 0;
            break;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Language Settings
if languageSettings = 1 {
    draw_set_color(c_dkgray);
    draw_set_font(fnt_default_24);
    draw_set_halign(fa_center);
    draw_set_valign(fa_center);
    
    draw_text(x,y-75,"Language")     

    draw_set_color(c_dkgray);
    draw_set_font(fnt_default12);
    draw_set_halign(fa_center);
    draw_set_valign(fa_center);

    draw_set_alpha(0.6)
    draw_text(x,y-50,"Current language: " + string(lang))
    draw_set_alpha(1)
    
    draw_text(x-75,y-25+15*li ,"&gt;")
    draw_text(x,y-25+15*0,"English (UK)")
    draw_text(x,y-25+15*1,"English (US)")
    draw_text(x,y-25+15*2,"Español (Ar)")
    draw_text(x,y-25+15*3,"Español (Es)")
    draw_text(x,y-25+15*4,"Español (Mx)")
    draw_text(x,y-25+15*5,"Español (Ur)")
    draw_text(x,y-25+15*6,"Español (Ve)")
    draw_text(x,y-25+15*7,"Català")
    draw_text(x,y-25+15*8,"Euskera")
    draw_text(x,y-25+15*9,"RESSET")
    draw_text(x,y-25+15*10,"APPLY")
    draw_text(x,y-25+15*11,"QUIT")
    
    if keyboard_check_pressed(vk_up) &amp;&amp; li &gt; 0{
        li -= 1;
    }
    if keyboard_check_pressed(vk_down) &amp;&amp; li &lt; 11{
        li += 1;
    }    
    
    if keyboard_check_pressed(vk_enter) {
        switch li {
            case 0: lang = "en_GB" break;
            case 1: lang = "en_US" break;
            case 2: lang = "es_AR" break;
            case 3: lang = "es_ES" break;
            case 4: lang = "es_MX" break;
            case 5: lang = "es_UY" break;
            case 6: lang = "es_VE" break;
            case 7: lang = "ca_ES" break;
            case 8: lang = "eu_ES" break;
        }
        //RESSET
        if (li = 9) { 
        ini_open("config/language.ini")
            ini_section_delete("Language");
            globalvar lang; global.lang = ini_read_string("Language","lang","en_GB")
        ini_close();          
        }
        //APPLY
        if (li = 10) { 
        ini_open("config/language.ini")
            ini_write_string("Language","lang",lang)            
        ini_close(); 
        script_execute(loadLang)
        }
        //QUIT
        if (li = 11) { 
            ini_open("config/language.ini")
                globalvar lang; global.lang = ini_read_string("Language","lang","en_GB")
            ini_close();
        script_execute(loadLang)
        languageSettings = 0;
        }
        keyboard_clear(vk_enter)
    }      
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
