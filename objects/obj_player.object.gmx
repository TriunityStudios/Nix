<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_standR</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_player_mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Caracteristics of the instance and variables
// Constants
globalvar viewRoom_Speed; viewRoom_Speed = room_speed;
varGrav = 1; // Variability of the Gravity. "1" is the normal "grav"
globalvar player_hsp; player_hsp = 0; // Initial horitzontal speed
globalvar player_vsp; player_vsp = 0; // Initial vertical speed
globalvar player_movDir; player_movDir = 1; // Initial walking direction:  -1=Left  0=Stopped  1=Right 
globalvar player_viewDir; player_viewDir = 1; // Initial veawing direction:  -1=Left  1=Right 
cont_contactHard = 0; // Counter fot stun after hard collision
autoRise = 0; // Auto ryse variable
contJumpInWallL = 0; contJumpInWallR = 0; // Cont to block the movDir in jump wall
cont_maxTimesJumpingInWall = 0; // counter of the times that the player jump in wall
climbBlock = 0; // If the player is climbing a block
jumpInWallL = 0; jumpInWallR = 0; //If the plyer is jumping from the wall
playerVertical_dash = 0; // If the player is doing the vertical dash
Check_collisionVDash = 0; // If the player collides with the flor when is doing the vertical dash
playerHorizontal_dash = 0; // If the player is doing the horizontal dash
HorDashTimer = 0; // Timer to calculate the time of the hor dash
blockJump = 0; // If the jump is blocked or not
save1 = 0; // Variable used to calculate maxSpeeds relative to the standard max speed
globalvar activeEnemies; activeEnemies = 0; // The number of hte active enemies

    //Sprites
    spriteLoop = 0; //If the sprite have restarts after ends (1) or not (0)
    Jumped = 0; // If the player is between the jump animation and the fall animation
    globalvar Player_ImageIndex; 
    globalvar Player_imageNumber;
    spr_stand = 0; 
    cont_spr_stand = 0;
    spr_walk = 0;
    cont_spr_walk = 0;
    spr_sprint = 0;
    cont_spr_sprint = 0;
    spr_jump = 0;
    cont_spr_jump = 0;
    spr_contactSoft = 0;
    cont_spr_contactSoft = 0;
    spr_contactHard = 0;
    cont_spr_contactHard = 0;
    spr_WakeUpAfterContactFlorHard = 0;
    cont_spr_WakeUpAfterContactFlorHard = 0;
    spr_goDownInWall = 0;
    cont_spr_goDownInWall = 0;
    spr_jumpingFromWallR = 0;
    cont_spr_jumpingFromWallR = 0;
    spr_jumpingFromWallL = 0;
    cont_spr_jumpingFromWallL = 0;
    spr_vertical_dash = 0;
    cont_spr_vertical_dash = 0;
    spr_horizontal_dash = 0;
    cont_spr_horizontal_dash = 0;
    spr_horizontal_dash = 0;
    cont_spr_horizontal_dash = 0;
    spr_player45_dash = 0;
    cont_spr_player45_dash = 0;
    spr_animationBasicAttack = 0;
    cont_spr_animationBasicAttack = 0;
    timing_spr_animationBasicAttack = 0; // Timer to controll the time that the player still with the basic attack animation after end it
    

// Variables
grav = 0.08; // Gravity
jumpspeed = 2.5; // Jump force
maxSpeed = 1; // Standard velocity
acceleration = 0.075; // Acceleration
sprint = 0.5; // Sprint velocity
check_rise = 6; // The height of the rise that instance automatically rise.
maxFallVel = 10; // Max velocity falling
stun_contactHard = 0.25; // Seconds stuned after hard contact with the flor (min = 0.25)
timeDirBlockedJumpInWall = 0.15; // Seconds with the movDit blocked when jump in wall
holdInWall = 0.5; // vsp when the player is holding wall becouse is next to
maxTimesJumpingInWall = 3; // Max times that the player can jump in the wall
timeHorDash = 0.3; // Seconds doing the horizontal dash
horDashExtraVel = 2; // Extra velocity of the hor dash
timeMax_spr_animationBasicAttack = 0.15; // (seconds) Time that the player still with the basic attack animation after end it


// Combat system
globalvar playerHeal; playerHeal = 10;

globalvar playerAD; playerAD = 1;
globalvar playerPenArm; playerPenArm = 1;
globalvar playerTrueAD; playerTrueAD = 1;
globalvar playerAP; playerAP = 1;
globalvar playerPenAP; playerPenAP = 1; 
globalvar playerTrueAP; playerTrueAP = 1;
globalvar playerCritickProbability; playerCritickProbability = 10; // In % [percentage]
globalvar playerCritickDamage; playerCritickDamage = 10;

globalvar playerLifeSteal; playerLifeSteal = 1;
globalvar playerSuccHech; playerSuccHech = 1;

globalvar playerArmour; playerArmour = 1;
globalvar playerResAP; playerResAP = 1;

globalvar playerAttackSpeed; playerAttackSpeed = 1;
globalvar playerReducCC; playerReducCC = 1;
globalvar playerReducCooldown; playerReducCooldown = 1;


    // Basic attack 
globalvar playerBasicAttack; playerBasicAttack = 0;

globalvar playerADBasicAttack; playerADBasicAttack = 1;
globalvar playerPenArmBasicAttack; playerPenArmBasicAttack = 1;
globalvar playerTrueADBasicAttack; playerTrueADBasicAttack = 1;
globalvar playerAPBasicAttack; playerAPBasicAttack = 1;
globalvar playerPenAPBasicAttack; playerPenAPBasicAttack = 1; 
globalvar playerTrueAPBasicAttack; playerTrueAPBasicAttack = 1;
globalvar playerCritickProbabilityBasicAttack; playerCritickProbabilityBasicAttack = 1; // In % [percentage]
globalvar playerCritickDamageBasicAttack; playerCritickDamageBasicAttack = 1;


    // Vertical Dash (multiplicate the standard for...)
globalvar playerCollisionVDash; playerCollisionVDash = 0; // If the player collides with the flor doing the vertical dash
playerVDashON = 0; // If the player is doing the vertical dash (for animations)

globalvar playerADVDash; playerADVDash = 1;
globalvar playerPenArmVDash; playerPenArmVDash = 1;
globalvar playerTrueADVDash; playerTrueADVDash = 1;
globalvar playerAPVDash; playerAPVDash = 1;
globalvar playerPenAPVDash; playerPenAPVDash = 1; 
globalvar playerTrueAPVDash; playerTrueAPVDash = 1;
globalvar playerCritickProbabilityVDash; playerCritickProbabilityVDash = 1; // In % [percentage]
globalvar playerCritickDamageVDash; playerCritickDamageVDash = 1;

    // Horizontal Dash (-45, 0, +45)
globalvar playerHorizontal_dash; playerHorizontal_dash = 0;

globalvar playerADHDash; playerADHDash = 1;
globalvar playerPenArmHDash; playerPenArmHDash = 1;
globalvar playerTrueADHDash; playerTrueADHDash = 1;
globalvar playerAPHDash; playerAPHDash = 1;
globalvar playerPenAPHDash; playerPenAPHDash = 1; 
globalvar playerTrueAPHDash; playerTrueAPHDash = 1;
globalvar playerCritickProbabilityHDash; playerCritickProbabilityHDash = 1; // In % [percentage]
globalvar playerCritickDamageHDash; playerCritickDamageHDash = 1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Environment - WORLD
    //Horizontal Collision
if (!place_free(x+player_hsp,y))
{
    while(place_free(x+sign(player_hsp),y,))
    {
        x += sign(player_hsp);
    }
    player_hsp = 0;
}
x += player_hsp;

    //Gravity
if (player_vsp &lt; maxFallVel) { player_vsp += (grav * varGrav); }

    //Vertical Collision
if (!place_free(x,y+player_vsp))
{
    while(place_free(x,y+sign(player_vsp)))
    {
        y += sign(player_vsp);
    }
    player_vsp = 0;
    verticalCollision = 1;
}
y += player_vsp; 
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Inputs and movments
//Get the player's input
key_right = keyboard_check(vk_right);
key_left = keyboard_check(vk_left);
key_jump = keyboard_check_pressed(vk_space);
key_sprint = keyboard_check (vk_lshift);
keep_key_jump = keyboard_check(vk_space);

//React to inputs
    ///Horizontal Movment
        ////Selección de la dirección de movimiento con keys
        player_movDir = (-key_left) + (key_right);

        //// Jump in wall
        //////
        if (!place_free(x-1,y)) &amp;&amp; (key_left) &amp;&amp; (key_jump) &amp;&amp; (player_vsp &gt; 0) &amp;&amp; (cont_maxTimesJumpingInWall &lt; maxTimesJumpingInWall) &amp;&amp; (autoRise = 0)
        {
            contJumpInWallL = timeDirBlockedJumpInWall;
            player_vsp = jumpspeed * (-key_jump);
            cont_maxTimesJumpingInWall += 1;
            jumpInWallL = 1;
        }

        //////
        if (!place_free(x+1,y)) &amp;&amp; (key_right) &amp;&amp; (key_jump) &amp;&amp; (player_vsp &gt; 0) &amp;&amp; (cont_maxTimesJumpingInWall &lt; maxTimesJumpingInWall) &amp;&amp; (autoRise = 0)
        {
            contJumpInWallR = timeDirBlockedJumpInWall;
            player_vsp = jumpspeed * (-key_jump);
            cont_maxTimesJumpingInWall += 1;
            jumpInWallR = 1;
        }

        if (player_vsp &gt; 0) 
        {
            jumpInWallL = 0;
            jumpInWallR = 0;
        }
        
        if (contJumpInWallL &gt; 0)
        {
            player_movDir = +1;
            contJumpInWallL -= 1/120;
        }
        if ( contJumpInWallR &gt; 0)
        {
            player_movDir = -1;
            contJumpInWallR -= 1/120;
        }
        
        if (!place_free(x,y+1)) { cont_maxTimesJumpingInWall = 0; }
        
        ////Velocitat horitzontal
        
        if (player_movDir != 0)
        {
        player_hsp += (acceleration) * player_movDir;
        }
        
        ////Frenada
        if (  (player_hsp != 0) &amp;&amp; (player_movDir = 0))
        {
            if (player_hsp &gt; acceleration) &amp;&amp; (abs(player_hsp) &gt; acceleration) { player_hsp -= acceleration; }
            if (player_hsp &lt; acceleration) &amp;&amp; (abs(player_hsp) &gt; acceleration) { player_hsp += acceleration; }   
            if (abs(player_hsp) &lt;= acceleration) { player_hsp = 0; }
        }
        
                
        
        ////Máxima velicidad
        if (player_hsp &gt; maxSpeed + (key_sprint * sprint) ) { player_hsp = maxSpeed + (key_sprint * sprint) }
        if (player_hsp &lt; - ( maxSpeed + (key_sprint * sprint)) ) { player_hsp = -( maxSpeed + (key_sprint * sprint)) }

        ////Selección de la dirección de vista según dirección real
        if (player_hsp &gt; 0) { player_viewDir = 1; }
        if (player_hsp &lt; 0) { player_viewDir = -1; }
                
    ///Jump
    if (!place_free(x,y+1))  &amp;&amp; (blockJump = 0)
    {
        player_vsp = jumpspeed * (-key_jump);
    }
    
// Auto Rise
    if ( (!place_free(x+(1*player_movDir),y)) &amp;&amp; (place_free(x+(1*player_movDir), y-(check_rise)))  )
{
    y -= 1;
    autoRise = 1;
} else { autoRise = 0; }

// Slow fall if is next to the wall
if (!place_free(x+1*player_viewDir, y)) &amp;&amp; (place_free(x, y+1)) &amp;&amp; (!key_jump) &amp;&amp; (player_vsp &gt; 0)
{
    if (key_left) &amp;&amp; (player_movDir = -1) { player_vsp = holdInWall; }
    if (key_right) &amp;&amp; (player_movDir = 1) { player_vsp = holdInWall; }
    nextToWallSliding = 1;
}
else
{
    nextToWallSliding = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Sprites
Player_ImageIndex = image_index;

////// Stop loop if sprLoop = 0
if (spriteLoop = 0) &amp;&amp; (image_index &gt;= image_number - 1) { image_index = image_number -1; image_speed = 0; }

    //Stand
if (abs(player_hsp) &lt;= 0.1) &amp;&amp; (player_vsp = 0) &amp;&amp; (cont_contactHard &lt;= 0.0) &amp;&amp; (collision_line(x, y, x, y+(check_rise+1), obj_solid, true, true)) &amp;&amp; (playerHorizontal_dash = 0) &amp;&amp; (spr_animationBasicAttack = 0)
{
    if (player_viewDir = 1) { sprite_index = spr_player_standR; }
    if (player_viewDir = -1) { sprite_index = spr_player_standL; }   
    spr_stand = 1; 
    image_speed = 0.03;
    spriteLoop = 1;
}else{ 
    spr_stand = 0;  
}


    //Walk
if (abs(player_hsp) &gt; 0.11) &amp;&amp; (key_sprint = 0) &amp;&amp; (player_vsp = 0) &amp;&amp; (cont_contactHard &lt;= 0.0) &amp;&amp; (collision_line(x, y, x, y+(check_rise+1), obj_solid, true, true)) &amp;&amp;  (playerHorizontal_dash = 0) &amp;&amp; (spr_animationBasicAttack = 0)
{
    if (player_viewDir = 1) { sprite_index = spr_player_walkR; }
    if (player_viewDir = -1) { sprite_index = spr_player_walkL; }   
    spr_sprint = 1; 
    image_speed = abs(player_hsp/10);
    spriteLoop = 1;
}else{ 
    spr_sprint = 0;  
}


    //Sprint
if (abs(player_hsp) &gt; 0.11) &amp;&amp; (key_sprint = 1) &amp;&amp; (player_vsp = 0) &amp;&amp; (cont_contactHard &lt;= 0.0)  &amp;&amp; (playerHorizontal_dash = 0) &amp;&amp; (spr_animationBasicAttack = 0)
{
    if (player_viewDir = 1) { sprite_index = spr_player_sprintR; }
    if (player_viewDir = -1) { sprite_index = spr_player_sprintL; }   
    if (cont_spr_sprint = 0) { image_index = 0; cont_spr_sprint = 1; }
    spr_sprint = 1; 
    image_speed = abs(player_hsp/15);
    spriteLoop = 1;
}else{ 
    spr_sprint = 0;  
    cont_spr_sprint = 0; 
}
    

    // Jump
if (player_vsp &lt; 0 ) &amp;&amp; (cont_contactHard &lt;= 0.0) &amp;&amp; (autoRise = 0) &amp;&amp; (climbBlock = 0) &amp;&amp; (playerHorizontal_dash = 0) &amp;&amp; (spr_animationBasicAttack = 0)
{
    if (player_viewDir = 1) { sprite_index = spr_player_jumpR; }
    if (player_viewDir = -1) { sprite_index = spr_player_jumpL; }   
    if (cont_spr_jump = 0) { image_index = 0; cont_spr_jump = 1; }
    spr_jump = 1; 
    image_speed = 0.12;
    spriteLoop = 0;
}else{ 
    spr_jump = 0;  
    cont_spr_jump = 0; 
}
        
 
    // Contact
        /// Soft
if (collision_line(x, y, x, y +((2*(sprite_get_height(spr_player_standR))) + player_vsp *2), obj_solid, true, true)) &amp;&amp; (((check_rise+1)/10) &lt; player_vsp) &amp;&amp; (player_vsp &lt; (maxFallVel/3)) &amp;&amp; (autoRise = 0) &amp;&amp; (place_free(x,y+((sprite_get_height(spr_player_standR))/1.5))) &amp;&amp; (playerVertical_dash = 0) &amp;&amp; (playerHorizontal_dash = 0) &amp;&amp; (spr_animationBasicAttack = 0)
{
    if (player_viewDir = 1) { sprite_index = spr_player_ContactFlorSoftR; }
    if (player_viewDir = -1) { sprite_index = spr_player_ContactFlorSoftL; } 
    if (cont_spr_contactSoft = 0) { image_index = 0; cont_spr_contactSoft = 1; }
    spr_contactSoft = 1; 
    image_speed = 0.12;
    spriteLoop = 0;
}else{ 
    spr_contactSoft = 0;  
    cont_spr_contactSoft = 0; 
}


        /// Hard
if (collision_line(x, y, x, y +((2*(sprite_get_height(spr_player_standR))) + player_vsp *2), obj_solid, true, true)) &amp;&amp; (0 &lt; player_vsp) &amp;&amp; (player_vsp &gt; (maxFallVel/3)) &amp;&amp; (autoRise = 0)  &amp;&amp; (playerVertical_dash = 0) &amp;&amp; (playerHorizontal_dash = 0) &amp;&amp; (spr_animationBasicAttack = 0)
{
    if (player_viewDir = 1) { sprite_index = spr_player_ContactFlorHardR; }
    if (player_viewDir = -1) { sprite_index = spr_player_ContactFlorHardL; }   
    if (cont_spr_contactHard = 0) { image_index = 0; cont_spr_contactHard = 1; }
    spr_contactHard = 1; 
    image_speed = 0.4;
    spriteLoop = 0;
}else{ 
    spr_contactHard = 0;  
    cont_spr_contactHard = 0; 
}



          /// Wall
if (!place_free(x+(player_hsp*3), y)) &amp;&amp; (place_free(x,y+1)) &amp;&amp; (player_vsp != 0) &amp;&amp; (autoRise = 0) &amp;&amp; (climbBlock = 0) &amp;&amp; (spr_animationBasicAttack = 0)
{
    if (player_viewDir = 1) { sprite_index = spr_player_goDownInWallR; }
    if (player_viewDir = -1) { sprite_index = spr_player_goDownInWallL; }   
    if (cont_spr_goDownInWall = 0) { image_index = 0; cont_spr_goDownInWall = 1; }
    spr_goDownInWall = 1; 
    image_speed = 0.01;
    spriteLoop = 0;
}else{ 
    spr_goDownInWall = 0;  
    cont_spr_goDownInWall = 0; 
}
        ///Jumping in wall
if (jumpInWallR = 1)
{
    sprite_index = spr_player_jumpingFromWallR;
    if (cont_spr_jumpingFromWallR = 0) { image_index = 0; cont_spr_jumpingFromWallR = 1; }
    spr_jumpingFromWallR = 1; 
    image_speed = 0.1;
    spriteLoop = 0;
}else{ 
    spr_jumpingFromWallR = 0;  
    cont_spr_jumpingFromWallR = 0; 
}

if (jumpInWallL = 1)
{
    sprite_index = spr_player_jumpingFromWallL;
    if (cont_spr_jumpingFromWallL = 0) { image_index = 0; cont_spr_jumpingFromWallL = 1; }
    spr_jumpingFromWallL = 1; 
    image_speed = 0.1;
    spriteLoop = 0;
}else{ 
    spr_jumpingFromWallL = 0;  
    cont_spr_jumpingFromWallL = 0; 
}


// Dash
    /// Vertical dash
    if (Check_collisionVDash = 1) &amp;&amp; (spr_animationBasicAttack = 0)
    {
        if (player_viewDir = 1) { sprite_index = spr_player_dashVerticalR; }
        if (player_viewDir = -1) { sprite_index = spr_player_dashVerticalL; }   
        if (cont_spr_vertical_dash  = 0) { image_index = 0; cont_spr_vertical_dash  = 1; }
        spr_vertical_dash = 1; 
        image_speed = 0.2;
        spriteLoop = 0;
    }else{ 
        spr_vertical_dash = 0;  
        cont_spr_vertical_dash  = 0; 
    }
    
    /// Horizontal dash
    if (playerHorizontal_dash = 1) &amp;&amp; (player_vsp &lt;= 1 ) /* &lt;-- Cambiar en cuando haya spr 45 hacia arriba por "(abs(player_vsp) &lt; 1 )" */ 
    {
        if (player_viewDir = 1) { sprite_index = spr_player_dashHorizontalR; }
        if (player_viewDir = -1) { sprite_index = spr_player_dashHorizontalL; }   
        if (cont_spr_horizontal_dash = 0) { image_index = 0; cont_spr_horizontal_dash = 1; }
        spr_horizontal_dash = 1; 
        image_speed =  0.2;
        spriteLoop = 0;
    }else{ 
        spr_horizontal_dash = 0;  
        cont_spr_horizontal_dash = 0; 
    }
    
        ////Dash 45
        if (playerHorizontal_dash = 1) &amp;&amp; (player_vsp &gt; 1)
        {
            if (player_viewDir = 1) { sprite_index = spr_player_dash45R; }
            if (player_viewDir = -1) { sprite_index = spr_player_dash45L; }   
            if (cont_spr_player45_dash  = 0) { image_index = 0; cont_spr_player45_dash  = 1; }
            spr_player45_dash  = 1; 
            image_speed = 0.1;
            spriteLoop = 0;
        }else{ 
            spr_player45_dash  = 0;  
            cont_spr_player45_dash  = 0; 
        }
   
// BAsic Attack
if (spr_animationBasicAttack = 1) &amp;&amp; (timing_spr_animationBasicAttack = 0)
{
    if (player_viewDir = 1) { sprite_index = spr_player_basicAtackR; }
    if (player_viewDir = -1) { sprite_index = spr_player_basicAtackL; }   
    if (cont_spr_animationBasicAttack = 0) { image_index = 0; cont_spr_animationBasicAttack = 1; }
    image_speed = 0.3;
    spriteLoop = 0;
}else{ 
    cont_spr_animationBasicAttack = 0; 
}
if (spr_animationBasicAttack = 1) &amp;&amp; (image_index &gt;= image_number - 1) { timing_spr_animationBasicAttack += (1/120) }
if (timing_spr_animationBasicAttack &gt;= timeMax_spr_animationBasicAttack) { spr_animationBasicAttack = 0; timing_spr_animationBasicAttack = 0;}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Climb 1/2 block
if 
    (
     place_free(x+1*player_movDir, y-12) &amp;&amp; (!place_free(x+1*player_movDir, y-11)) &amp;&amp; (key_right) &amp;&amp; (key_sprint) &amp;&amp; (autoRise = 0) &amp;&amp; (playerHorizontal_dash = 0)
    ||
     place_free(x+1*player_movDir, y-12) &amp;&amp; (!place_free(x+1*player_movDir, y-11)) &amp;&amp; (key_left) &amp;&amp; (key_sprint) &amp;&amp; (autoRise = 0) &amp;&amp; (playerHorizontal_dash = 0)
    )
{
    climbBlock = 1;
}


if (climbBlock = 1)
{
    player_vsp = -0.15;
}
    




// sprite image 1
if (climbBlock = 1) &amp;&amp; place_free(x+1*player_movDir, y-12) &amp;&amp; (!place_free(x+1*player_movDir, y-11))
{
    player_vsp = -0.15;
        
    if (key_right)
    {
        sprite_index = spr_player_TreparBorde1R;
        image_speed = 1;
    }
    if (key_left)
    {
        sprite_index = spr_player_TreparBorde1L;
        image_speed = 1;
    }
}
 

// sprite image 2
if (climbBlock = 1) &amp;&amp; place_free(x+1*player_movDir, y-10) &amp;&amp; (!place_free(x+1*player_movDir, y-9))
{
    player_vsp = -0.15;
        
    if (key_right)
    {
        sprite_index = spr_player_TreparBorde2R;
        image_speed = 1;
    }
    if (key_left)
    {
        sprite_index = spr_player_TreparBorde2L;
        image_speed = 1;
    }
}


// sprite image 3
if (climbBlock = 1) &amp;&amp; place_free(x+2*player_movDir, y-8) &amp;&amp; (!place_free(x+1*player_movDir, y-7))
{
    player_vsp = -0.15;
        
    if (key_right)
    {
        sprite_index = spr_player_TreparBorde3R;
        image_speed = 1;
    }
    if (key_left)
    {
        sprite_index = spr_player_TreparBorde3L;
        image_speed = 1;
    }
}


if (place_free(x+1*player_movDir, y)) || (!key_sprint)
{
    climbBlock = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Auto rise 
if ( (!place_free(x+(1*player_movDir),y)) &amp;&amp; (place_free(x+(1*player_movDir), y-check_rise)) )
{
    y -= 1
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>obj_player</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Combat mode
 if (keyboard_check_pressed(ord("W"))) &amp;&amp; (playerHorizontal_dash = 0) &amp;&amp; (playerVertical_dash = 0)
 { playerBasicAttack = 1;} else { playerBasicAttack = 0; }
 if (playerBasicAttack = 1) {  spr_animationBasicAttack = 1; }
 
 
/// Vertical Dash
 if (keyboard_check_pressed(ord("S"))) &amp;&amp; (place_free(x,y+1)) &amp;&amp; (!collision_line(x, y, x, y+20, obj_solid, true, true)) &amp;&amp; (climbBlock = 0) &amp;&amp; (nextToWallSliding = 0) &amp;&amp; (playerHorizontal_dash = 0) 
  { 
    playerVertical_dash = 1;
  }
 if (!place_free(x,y+1)) { playerVertical_dash = 0; }
 if (playerVertical_dash = 1) { Check_collisionVDash = 1; }
 if (Check_collisionVDash = 1) &amp;&amp; (!place_free (x,y+1)) { playerCollisionVDash = 1; } else { playerCollisionVDash = 0; }
 if (playerCollisionVDash = 1) &amp;&amp; (Check_collisionVDash = 1) { Check_collisionVDash = 0; }

 
/// Horizontal Dash
if (keyboard_check_pressed(ord("D"))) &amp;&amp; (HorDashTimer = 0) { playerHorizontal_dash = 1; save1 = maxSpeed; }
if ( playerHorizontal_dash = 1 ) { HorDashTimer += (1/120); maxSpeed = save1 + horDashExtraVel; }

if (HorDashTimer &gt; timeHorDash) 
{
    playerHorizontal_dash = 0;  
    if (maxSpeed &gt; save1) { maxSpeed -= acceleration; }
    if (maxSpeed &lt;= save1) { HorDashTimer = 0; maxSpeed = save1}
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Block Movment after ard fall
if (spr_contactHard = 1)
 {
    cont_contactHard = stun_contactHard;
 }
if (cont_contactHard &gt; 0.0) &amp;&amp; (!place_free(x,y+1))
 {
    cont_contactHard -= (1/120);
    player_hsp = 0;
    player_vsp = 0;
    if (cont_contactHard &lt; 0.2) &amp;&amp; (cont_contactHard &gt; 0.0)
     {
        if (player_viewDir = 1) { sprite_index = spr_player_WakeUpAfterContactFlorHardR; }
        if (player_viewDir = -1) { sprite_index = spr_player_WakeUpAfterContactFlorHardL; }   
        if (cont_spr_WakeUpAfterContactFlorHard = 0) { image_index = 0; cont_spr_WakeUpAfterContactFlorHard = 1; }
        spr_WakeUpAfterContactFlorHard = 1; 
        image_speed = 0.1;
        spriteLoop = 0;
     }else{ 
        spr_WakeUpAfterContactFlorHard = 0;  
        cont_spr_WakeUpAfterContactFlorHard = 0; 
     }   
 }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,16</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
