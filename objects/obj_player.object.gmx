<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_standR</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>mask_player</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Caracteristics of the instance and variables
// Constants
globalvar viewRoom_Speed; viewRoom_Speed = room_speed;
varGrav = 1; // Variability of the Gravity. "1" is the normal "grav"
globalvar player_hsp; player_hsp = 0; // Initial horitzontal speed
globalvar player_vsp; player_vsp = 0; // Initial vertical speed
globalvar player_movDir; player_movDir = 1; // Walking direction:  -1=Left  0=Stopped  1=Right 
globalvar player_viewDir; player_viewDir = 1; // Initial veawing direction:  -1=Left  1=Right 
cont_contactHard = 0; // Counter fot stun after hard collision
cont_vDash = 0; // Counter fot stun after vertical dash collision
autoRise = 0; // Auto ryse variable
contJumpInWallL = 0; contJumpInWallR = 0; // Cont to block the movDir in jump wall
cont_maxTimesJumpingInWall = 0; // counter of the times that the player jump in wall
climbBlock = 0; // If the player is climbing a block
jumpInWallL = 0; jumpInWallR = 0; //If the plyer is jumping from the wall
playerVertical_dash = 0; // If the player is doing the vertical dash
Check_collisionVDash = 0; // If the player collides with the flor when is doing the vertical dash
playerHorizontal_dash = 0; // If the player is doing the horizontal dash
HorDashTimer = 0; // Timer to calculate the time of the hor dash
blockJump = 0; // If the jump is blocked or not
save1 = 0; // Variable used to calculate maxSpeeds relative to the standard max speed
globalvar activeEnemies; activeEnemies = 0; // The number of hte active enemies
modifyMaxFallVel = 1; // Variable used to change the "maxFAllVel"
counter_regenHPs = 0; // Counter to regen HP/s
globalvar playerAttacked; playerAttacked = 0; // If the player is attacked or not
timingRegenHP = 0; // Counter yo control the ime that the player is not in battle
regenHPacc = 0; // HP regeneration per second
regenSTacc = 0; // HP regeneration per second
globalvar playerStuned; playerStuned = 0; //If the player is stuned or not
wasteStaminaBasAtt = 0; // Waste the estamina to do the hability basic attack
wasteStaminaSpin = 0; // Waste the estamina to do the hability Spin
wasteStaminaVDash = 0;// Waste the estamina to do the hability vertical dash
wasteStaminaHDash = 0;// Waste the estamina to do the hability horizontal dash
globalvar Player_ImageIndex; Player_ImageIndex = image_index;
globalvar Player_SpriteIndex; Player_SpriteIndex = sprite_index;
timeSpin = 0;
aniSpin = 0;

    //Sprites
    spriteLoop = 0; //If the sprite have restarts after ends (1) or not (0)
    Jumped = 0; // If the player is between the jump animation and the fall animation
    globalvar Player_ImageIndex; 
    globalvar Player_imageNumber;
    spr_stand = 0; 
    cont_spr_stand = 0;
    spr_walk = 0;
    cont_spr_walk = 0;
    spr_sprint = 0;
    cont_spr_sprint = 0;
    spr_jump = 0;
    cont_spr_jump = 0;
    spr_contactSoft = 0;
    cont_spr_contactSoft = 0;
    spr_contactHard = 0;
    cont_spr_contactHard = 0;
    spr_WakeUpAfterContactFlorHard = 0;
    cont_spr_WakeUpAfterContactFlorHard = 0;
    spr_goDownInWall = 0;
    cont_spr_goDownInWall = 0;
    spr_jumpingFromWallR = 0;
    cont_spr_jumpingFromWallR = 0;
    spr_jumpingFromWallL = 0;
    cont_spr_jumpingFromWallL = 0;
    spr_vertical_dash = 0;
    cont_spr_vertical_dash = 0;
    spr_horizontal_dash = 0;
    cont_spr_horizontal_dash = 0;
    spr_horizontal_dash = 0;
    cont_spr_horizontal_dash = 0;
    spr_player45_dash = 0;
    cont_spr_player45_dash = 0;
    spr_animationBasicAttack = 0;
    cont_spr_animationBasicAttack = 0;
    spr_animationSpin = 0;
    cont_spr_animationSpin = 0;
    globalvar timing_spr_animationBasicAttack; timing_spr_animationBasicAttack = 0; // Timer to controll the time that the player still with the basic attack animation after end it
    spr_TreparBorde = 0;
    cont_spr_TreparBorde = 0;
    globalvar timing_spr_animationSpin; timing_spr_animationSpin = 0;

// Variables
grav = 0.1; // Gravity
jumpspeed = 4.5; // Jump force
maxSpeed = 2.5; // Standard velocity
acceleration = 0.075; // Acceleration
sprint = 1; // Sprint velocity
check_rise = 6; // The height of the rise that instance automatically rise.
maxFallVel = 10; // Max velocity falling
stun_contactHard = 0.5; // Seconds stuned after hard contact with the flor (min = 0.25)
stun_contactvDash = 0.5; // Seconds stuned after vertical dash contact with the flor (min = 0.25)
timeDirBlockedJumpInWall = 0.15; // Seconds with the movDit blocked when jump in wall
holdInWall = 0.5; // vsp when the player is holding wall becouse is next to
maxTimesJumpingInWall = 3; // Max times that the player can jump in the wall
timeHorDash = 0.3; // Seconds doing the horizontal dash
horDashExtraVel = 2; // Extra velocity of the hor dash
timeMax_spr_animationBasicAttack = 0.15; // (seconds) Time that the player still with the basic attack animation after end it
timeMax_spr_animationSpin = 0; // (seconds) Time that the player still with the spin animation after end it
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Combat system

globalvar playerHeal; playerHeal = 10;
globalvar playerNoBattle; playerNoBattle = 5; // Second that considerates the player is not in battle
globalvar accelerationRegenHP; accelerationRegenHP = 0.0005; // Acceleration of the regeneration of HP/s

globalvar playerStamina; playerStamina = 0;
globalvar regenSTs; regenSTs = 30; // Max ST regenerated every second
globalvar accelerationRegenST; accelerationRegenST = 0.0005; // Acceleration of the regeneration of ST/s

globalvar playerEXPnextLvL; playerEXPnextLvL = 10; //exp that needs to pass the first lvl
globalvar playerEXPaddNewLvL; playerEXPaddNewLvL = 20; //New exp that needs every lvl
globalvar animationNextLvL; animationNextLvL = 0;

    // Basic attack 
globalvar playerBasicAttack; playerBasicAttack = 0;
globalvar playerBasicAttackCD; playerBasicAttackCD = 0; // Reaming CD for hab (seconds) [don't change]

    // Spin
globalvar playerSpin; playerSpin = 0;
globalvar playerSpinCD; playerSpinCD = 0; // Reaming CD for hab (seconds) [don't change]
globalvar LongSpin; LongSpin = 1.5; // (seconds) Duration of the spin
globalvar everSpinHitTime; everSpinHitTime = 0.2; //(seconds) Ever when the player hits the enemy doing the spin

    // Vertical Dash (multiplicate the standard for...)
globalvar playerCollisionVDash; playerCollisionVDash = 0; // If the player collides with the flor doing the vertical dash
playerVDashON = 0; // If the player is doing the vertical dash (for animations)
globalvar vspVerticalDash; vspVerticalDash = 0.1; //Increases 120 times/s that vertical velocity
globalvar playerVertical_dashCD; playerVertical_dashCD = 0; // Reaming CD for V Dash (seconds) [don't change]

    // Horizontal Dash (-45, 0, +45)
globalvar playerHorizontal_dash; playerHorizontal_dash = 0;
globalvar playerHorizontal_dashCD; playerHorizontal_dashCD = 0; // Reaming CD for Horizontal Dash (seconds) [don't change]
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Upgrades
globalvar upgradePlayerMaxHeal; upgradePlayerMaxHeal = 1;
globalvar upgradeRegenHPs; upgradeRegenHPs = 1;
globalvar upgradeAccelerationRegenHP; upgradeAccelerationRegenHP = 1;

globalvar upgradePlayerMaxStamina; upgradePlayerMaxStamina = 1;
globalvar upgradeRegenSTs; upgradeRegenSTs = 1;
globalvar upgradeAccelerationRegenST; upgradeAccelerationRegenST = 1;

globalvar upgradePlayerAD; upgradePlayerAD = 1;
globalvar upgradePlayerPenArm; upgradePlayerPenArm = 1;
globalvar upgradePlayerTrueAD; upgradePlayerTrueAD = 1;
globalvar upgradePlayerAP; upgradePlayerAP = 1;
globalvar upgradePlayerPenAP; upgradePlayerPenAP = 1; 
globalvar upgradePlayerTrueAP; upgradePlayerTrueAP = 1;
globalvar upgradePlayerCritickProbability; upgradePlayerCritickProbability = 1;
globalvar upgradePlayerCritickDamage; upgradePlayerCritickDamage = 1;

globalvar upgradePlayerArmour; upgradePlayerArmour = 1;
globalvar upgradePlayerResAP; upgradePlayerResAP = 1;

globalvar upgradeResKnockback; upgradeResKnockback = 1;

globalvar upgradeSTbAttack; upgradeSTbAttack = 1;
globalvar upgradeCDbAttack; upgradeCDbAttack = 0.2;

globalvar upgradeSTspin; upgradeSTspin = 1;
globalvar upgradeCDspin; upgradeCDspin = 0.2;

globalvar upgradeSTvDash; upgradeSTvDash = 1;
globalvar upgradeCDvDash; upgradeCDvDash = 0.2;

globalvar upgradeSThDash; upgradeSThDash = 1;
globalvar upgradeCDhDash; upgradeCDhDash = 0.2;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Particles
ps = part_system_create();

    //Variables
    timeParSprint = 0;
    parSprrint = 1;
    
    // dustWalk
        dustWalkR = part_type_create();
            part_type_shape(dustWalkR,pt_shape_disk);
            part_type_size(dustWalkR,0.01,0.02,0,0);
            part_type_colour1(dustWalkR,c_gray);
            part_type_speed(dustWalkR,2,5,-1,0);
            part_type_direction(dustWalkR,0,20,10,10);
            part_type_gravity(dustWalkR,.05,10);
            part_type_life(dustWalkR,10,40);
            part_system_depth(dustWalkR,(depth-1));
            
        dustWalkL = part_type_create();
            part_type_shape(dustWalkL,pt_shape_disk);
            part_type_size(dustWalkL,0.01,0.02,0,0);
            part_type_colour1(dustWalkL,c_gray);
            part_type_speed(dustWalkL,2,5,-1,0);
            part_type_direction(dustWalkL,0,20,10,10);
            part_type_gravity(dustWalkL,.05,170);
            part_type_life(dustWalkL,10,40);
            part_system_depth(dustWalkL,(depth-1));            
            
        test1 = part_type_create();
            part_type_shape(test1,pt_shape_disk);
            part_type_size(test1,0.01,0.02,0,0);
            part_type_colour1(test1,c_red);
            part_type_speed(test1,2,5,-1,0);
            part_type_direction(test1,0,0,0,0);
            part_type_gravity(test1,.05,45);
            part_type_life(test1,200,3000);
            part_system_depth(test1,(depth-1));            
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Environment - WORLD

/*PAUSE GAME*/ if pause exit; /*END PAUSE GAME*/

    //Horizontal Collision
if (!place_free(x+player_hsp,y))
{
    while(place_free(x+sign(player_hsp),y,))
    {
        x += sign(player_hsp);
    }
    player_hsp = 0;
}
x += player_hsp;

    //Gravity
if (player_vsp &lt; (maxFallVel * modifyMaxFallVel)) { player_vsp += (grav * varGrav); }

    //Vertical Collision
if (!place_free(x,y+player_vsp))
{
    while(place_free(x,y+sign(player_vsp)))
    {
        y += sign(player_vsp);
    }
    player_vsp = 0;
    verticalCollision = 1;
}
y += player_vsp; 
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Inputs and movments

/*PAUSE GAME*/ if pause exit; /*END PAUSE GAME*/

//Get the player's input
if (playerHorizontal_dash = 0) { 
    key_right = keyboard_check(goRight_Key); 
    key_left = keyboard_check(goLeft_Key); 
}
key_jump = keyboard_check_pressed(jump_Key);
key_sprint = keyboard_check(sprint_Key);
keep_key_jump = keyboard_check(jump_Key);

//React to inputs
    ///Horizontal Movment
        ////Selección de la dirección de movimiento con keys
        player_movDir = (-key_left) + (key_right);

        //// Jump in wall
        //////L
        if (!place_free(x-1,y)) &amp;&amp; (key_left) &amp;&amp; (key_jump) &amp;&amp; (player_vsp &gt; 0) &amp;&amp; (cont_maxTimesJumpingInWall &lt; maxTimesJumpingInWall) &amp;&amp; (autoRise = 0)
        {
            contJumpInWallL = timeDirBlockedJumpInWall;
            player_vsp = jumpspeed * (-key_jump);
            cont_maxTimesJumpingInWall += 1;
            jumpInWallL = 1;
        }

        //////R
        if (!place_free(x+1,y)) &amp;&amp; (key_right) &amp;&amp; (key_jump) &amp;&amp; (player_vsp &gt; 0) &amp;&amp; (cont_maxTimesJumpingInWall &lt; maxTimesJumpingInWall) &amp;&amp; (autoRise = 0)
        {
            contJumpInWallR = timeDirBlockedJumpInWall;
            player_vsp = jumpspeed * (-key_jump);
            cont_maxTimesJumpingInWall += 1;
            jumpInWallR = 1;
        }

        //---//
        if (player_vsp &gt; 0) {
            jumpInWallL = 0;
            jumpInWallR = 0;
        }
        
        if (contJumpInWallL &gt; 0) {
            player_movDir = +1;
            contJumpInWallL -= 1/120;
        }
        if ( contJumpInWallR &gt; 0){
            player_movDir = -1;
            contJumpInWallR -= 1/120;
        }
        
        if (!place_free(x,y+1)) { cont_maxTimesJumpingInWall = 0; }
        
        ////Velocitat horitzontal
        if (player_movDir != 0) {
            player_hsp += (acceleration) * player_movDir;
        }
        
        ////Frenada
        if (  (player_hsp != 0) &amp;&amp; (player_movDir = 0))
        {
            if (player_hsp &gt; acceleration) &amp;&amp; (abs(player_hsp) &gt; acceleration) { player_hsp -= acceleration; }
            if (player_hsp &lt; acceleration) &amp;&amp; (abs(player_hsp) &gt; acceleration) { player_hsp += acceleration; }   
            if (abs(player_hsp) &lt;= acceleration) { player_hsp = 0; }
        }
        
        
        ////Máxima velicidad
        if (player_hsp &gt; maxSpeed + (key_sprint * sprint) ) { player_hsp = maxSpeed + (key_sprint * sprint) }
        if (player_hsp &lt; - ( maxSpeed + (key_sprint * sprint)) ) { player_hsp = -( maxSpeed + (key_sprint * sprint)) }

        ////Selección de la dirección de vista según dirección real
        if (player_hsp &gt; 0) { player_viewDir = 1; }
        if (player_hsp &lt; 0) { player_viewDir = -1; }
                
    ///Jump
    if (!place_free(x,y+1))  &amp;&amp; (blockJump = 0)
    {
        player_vsp = jumpspeed * (-key_jump);
    }
    


// Slow fall if is next to the wall
if (!place_free(x+1*player_viewDir, y-50)) &amp;&amp; (!place_free(x+1*player_viewDir, y)) &amp;&amp; (place_free(x, y+1)) &amp;&amp; (!key_jump) &amp;&amp; (player_vsp &gt; 0)
{
    if (key_left) &amp;&amp; (player_movDir = -1) { player_vsp = holdInWall; }
    if (key_right) &amp;&amp; (player_movDir = 1) { player_vsp = holdInWall; }
    nextToWallSliding = 1;
}
else
{
    nextToWallSliding = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Sprites

/*PAUSE GAME*/ if pause exit; /*END PAUSE GAME*/

Player_ImageIndex = image_index;
Player_SpriteIndex = sprite_index;

////// Stop loop if sprLoop = 0
if (spriteLoop = 0) &amp;&amp; (image_index &gt;= image_number - 1) { image_index = image_number -1; image_speed = 0; }

    //Stand
if (abs(player_hsp) &lt;= 0.1) &amp;&amp; (player_vsp = 0) &amp;&amp; (cont_vDash &lt;= 0.0) &amp;&amp; (cont_contactHard &lt;= 0.0) &amp;&amp; (playerHorizontal_dash = 0) &amp;&amp; (spr_animationBasicAttack = 0) &amp;&amp; (!place_free(x,y+1)) &amp;&amp; (jumpInWallR = 0) &amp;&amp; (jumpInWallL = 0) &amp;&amp; (spr_animationSpin = 0)
{
    if (player_viewDir = 1) { sprite_index = spr_player_standR; }
    if (player_viewDir = -1) { sprite_index = spr_player_standL; }   
    spr_stand = 1; 
    image_speed = 0.03;
    spriteLoop = 1;
}else{ 
    spr_stand = 0;  
}


    //Walk
if (abs(player_hsp) &gt; 0.11) &amp;&amp; (key_sprint = 0) &amp;&amp; (player_vsp = 0) &amp;&amp; (cont_vDash &lt;= 0.0) &amp;&amp; (cont_contactHard &lt;= 0.0) &amp;&amp; (collision_line(x, y, x, y+(check_rise+1), obj_solid, true, true)) &amp;&amp;  (playerHorizontal_dash = 0) &amp;&amp; (spr_animationBasicAttack = 0) &amp;&amp; (jumpInWallR = 0) &amp;&amp; (jumpInWallL = 0) &amp;&amp; (spr_animationSpin = 0)
{ if (abs(player_vsp) &lt; 1) || (autoRise = 1) {
    if (player_viewDir = 1) { sprite_index = spr_player_walkR; }
    if (player_viewDir = -1) { sprite_index = spr_player_walkL; }   
    spr_walk = 1; 
    image_speed = abs(player_hsp/18);
    spriteLoop = 1;
  } else { 
    spr_walk = 0;  
  }
}


    //Sprint
if (abs(player_hsp) &gt; 0.11) &amp;&amp; (key_sprint = 1) &amp;&amp; (cont_vDash &lt;= 0.0) &amp;&amp; (cont_contactHard &lt;= 0.0) &amp;&amp; (collision_line(x, y, x, y+(check_rise+1), obj_solid, true, true)) &amp;&amp;  (playerHorizontal_dash = 0) &amp;&amp; (spr_animationBasicAttack = 0) &amp;&amp; (jumpInWallR = 0) &amp;&amp; (jumpInWallL = 0) &amp;&amp; (spr_animationSpin = 0)
{ if (abs(player_vsp) &lt; 1) || (autoRise = 1) {
    if (player_viewDir = 1) { sprite_index = spr_player_sprintR; }
    if (player_viewDir = -1) { sprite_index = spr_player_sprintL; }   
    if (cont_spr_sprint = 0) { image_index = 0; cont_spr_sprint = 1; }
    spr_sprint = 1; 
    image_speed = abs(player_hsp/28);
    spriteLoop = 1;
  } else { 
    spr_sprint = 0;  
    cont_spr_sprint = 0; 
  }
}
    

    // Jump
if (player_vsp &lt; 0 ) &amp;&amp; (cont_vDash &lt;= 0.0) &amp;&amp; (cont_contactHard &lt;= 0.0) &amp;&amp; (autoRise = 0) &amp;&amp; (climbBlock = 0) &amp;&amp; (playerHorizontal_dash = 0) &amp;&amp; (spr_animationBasicAttack = 0) &amp;&amp; (jumpInWallR = 0) &amp;&amp; (jumpInWallL = 0) &amp;&amp; (spr_animationSpin = 0)
{
    if (player_viewDir = 1) { sprite_index = spr_player_jumpR; }
    if (player_viewDir = -1) { sprite_index = spr_player_jumpL; }   
    if (cont_spr_jump = 0) { image_index = 0; cont_spr_jump = 1; }
    spr_jump = 1; 
    image_speed = 0.12;
    spriteLoop = 0;
}else{ 
    spr_jump = 0;  
    cont_spr_jump = 0; 
}
        
 
    // Contact
        /// Soft
if (collision_line(x, y, x, y +((2*(sprite_get_height(spr_player_standR))) + player_vsp *2), obj_solid, true, true)) &amp;&amp; (((check_rise+1)/10) &lt; player_vsp) &amp;&amp; (player_vsp &lt; (maxFallVel/3)) &amp;&amp; (autoRise = 0) &amp;&amp; (place_free(x,y+((sprite_get_height(spr_player_standR))/1.5))) &amp;&amp; (playerVertical_dash = 0) &amp;&amp; (playerHorizontal_dash = 0) &amp;&amp; (spr_animationBasicAttack = 0) &amp;&amp; (jumpInWallR = 0) &amp;&amp; (jumpInWallL = 0) &amp;&amp; (spr_animationSpin = 0)
{
    if (player_viewDir = 1) { sprite_index = spr_player_ContactFlorSoftR; }
    if (player_viewDir = -1) { sprite_index = spr_player_ContactFlorSoftL; } 
    if (cont_spr_contactSoft = 0) { image_index = 0; cont_spr_contactSoft = 1; }
    spr_contactSoft = 1; 
    image_speed = 0.12;
    spriteLoop = 0;
}else{ 
    spr_contactSoft = 0;  
    cont_spr_contactSoft = 0; 
}


        /// Hard
if (collision_line(x, y, x, y +((2*(sprite_get_height(spr_player_standR))) + player_vsp *2), obj_solid, true, true)) &amp;&amp; (0 &lt; player_vsp) &amp;&amp; (player_vsp &gt; (maxFallVel/1.7)) &amp;&amp; (autoRise = 0)  &amp;&amp; (playerVertical_dash = 0) &amp;&amp; (playerHorizontal_dash = 0) &amp;&amp; (spr_animationBasicAttack = 0) &amp;&amp; (jumpInWallR = 0) &amp;&amp; (jumpInWallL = 0) &amp;&amp; (spr_animationSpin = 0)
{
    if (player_viewDir = 1) { sprite_index = spr_player_ContactFlorHardR; }
    if (player_viewDir = -1) { sprite_index = spr_player_ContactFlorHardL; }   
    if (cont_spr_contactHard = 0) { image_index = 0; cont_spr_contactHard = 1; }
    spr_contactHard = 1; 
    image_speed = 0.4;
    spriteLoop = 0;
}else{ 
    spr_contactHard = 0;  
    cont_spr_contactHard = 0; 
}



          /// Wall
if (nextToWallSliding = 1) &amp;&amp; (!place_free(x+(player_hsp*3), y)) &amp;&amp; (place_free(x,y+1)) &amp;&amp; (player_vsp != 0) &amp;&amp; (autoRise = 0) &amp;&amp; (climbBlock = 0) &amp;&amp; (spr_animationBasicAttack = 0) &amp;&amp; (jumpInWallR = 0) &amp;&amp; (jumpInWallL = 0) &amp;&amp; (jumpInWallR = 0) &amp;&amp; (jumpInWallL = 0) &amp;&amp; (spr_animationSpin = 0)
{
    if (player_viewDir = 1) { sprite_index = spr_player_goDownInWallR; }
    if (player_viewDir = -1) { sprite_index = spr_player_goDownInWallL; }   
    if (cont_spr_goDownInWall = 0) { image_index = 0; cont_spr_goDownInWall = 1; }
    spr_goDownInWall = 1; 
    image_speed = 0.07;
    spriteLoop = 1;
}else{ 
    spr_goDownInWall = 0;  
    cont_spr_goDownInWall = 0; 
}
        ///Jumping in wall
if (jumpInWallR = 1) &amp;&amp; (spr_animationSpin = 0)
{
    sprite_index = spr_player_jumpingFromWallR;
    if (cont_spr_jumpingFromWallR = 0) { image_index = 0; cont_spr_jumpingFromWallR = 1; }
    spr_jumpingFromWallR = 1; 
    image_speed = 0.18;
    spriteLoop = 0;
}else{ 
    spr_jumpingFromWallR = 0;  
    cont_spr_jumpingFromWallR = 0; 
}

if (jumpInWallL = 1) &amp;&amp; (spr_animationSpin = 0)
{
    sprite_index = spr_player_jumpingFromWallL;
    if (cont_spr_jumpingFromWallL = 0) { image_index = 0; cont_spr_jumpingFromWallL = 1; }
    spr_jumpingFromWallL = 1; 
    image_speed = 0.18;
    spriteLoop = 0;
}else{ 
    spr_jumpingFromWallL = 0;  
    cont_spr_jumpingFromWallL = 0; 
}


// Dash
    /// Vertical dash
    if (Check_collisionVDash = 1) &amp;&amp; (spr_animationBasicAttack = 0) &amp;&amp; (player_vsp &gt; 0) || (cont_vDash &gt; 0.0)  &amp;&amp; (jumpInWallR = 0) &amp;&amp; (jumpInWallL = 0)  &amp;&amp; (spr_animationSpin = 0){

        if (player_viewDir = 1) { sprite_index = spr_player_dashVerticalR; }
        if (player_viewDir = -1) { sprite_index = spr_player_dashVerticalL; }   
        if (cont_spr_vertical_dash  = 0) { image_index = 0; cont_spr_vertical_dash  = 1; }
        spr_vertical_dash = 1; 
        image_speed = 0.2;
        spriteLoop = 0;
    }else{ 
        spr_vertical_dash = 0;  
        cont_spr_vertical_dash  = 0; 
    }
    
    /// Horizontal dash
    if (playerHorizontal_dash = 1)  &amp;&amp; (jumpInWallR = 0) &amp;&amp; (jumpInWallL = 0) &amp;&amp; (player_vsp &lt;= 1 ) /* &lt;-- Cambiar en cuando haya spr 45 hacia arriba por "(abs(player_vsp) &lt; 1 )" */  &amp;&amp; (spr_animationSpin = 0)
    {
        if (player_viewDir = 1) { sprite_index = spr_player_dashHorizontalR; }
        if (player_viewDir = -1) { sprite_index = spr_player_dashHorizontalL; }   
        if (cont_spr_horizontal_dash = 0) { image_index = 0; cont_spr_horizontal_dash = 1; }
        spr_horizontal_dash = 1; 
        image_speed =  0.2;
        spriteLoop = 0;
    }else{ 
        spr_horizontal_dash = 0;  
        cont_spr_horizontal_dash = 0; 
    }
    
        ////Dash 45
        if (playerHorizontal_dash = 1) &amp;&amp; (player_vsp &gt; 1) &amp;&amp; (jumpInWallR = 0) &amp;&amp; (jumpInWallL = 0) &amp;&amp; (spr_animationSpin = 0)
        {
            spriteLoop = 0;
            if (player_viewDir = 1) { sprite_index = spr_player_dash45R; }
            if (player_viewDir = -1) { sprite_index = spr_player_dash45L; }   
            if (cont_spr_player45_dash  = 0) { image_index = 0; cont_spr_player45_dash  = 1; }
            spr_player45_dash  = 1; 
            image_speed = 0.1;
        }else{ 
            spr_player45_dash  = 0;  
            cont_spr_player45_dash  = 0; 
        }
   
// Basic Attack
if (spr_animationBasicAttack = 1) &amp;&amp; (timing_spr_animationBasicAttack = 0) &amp;&amp; (jumpInWallR = 0) &amp;&amp; (jumpInWallL = 0) &amp;&amp; (spr_animationSpin = 0)
{
    if (player_viewDir = 1) { sprite_index = spr_player_basicAtackR; }
    if (player_viewDir = -1) { sprite_index = spr_player_basicAtackL; }   
    if (cont_spr_animationBasicAttack = 0) { image_index = 0; cont_spr_animationBasicAttack = 1; }
    image_speed = 0.3;
    spriteLoop = 0;
}else{ 
    cont_spr_animationBasicAttack = 0; 
}
if (spr_animationBasicAttack = 1) &amp;&amp; (image_index &gt;= image_number - 1) { timing_spr_animationBasicAttack += (1/120) }
if (timing_spr_animationBasicAttack &gt;= timeMax_spr_animationBasicAttack) { spr_animationBasicAttack = 0; timing_spr_animationBasicAttack = 0;}


// Spin
if (spr_animationSpin = 1) &amp;&amp; (timing_spr_animationSpin = 0) &amp;&amp; (jumpInWallR = 0) &amp;&amp; (jumpInWallL = 0) {
    if (player_viewDir = 1) { sprite_index = spr_player_spinR; }
    if (player_viewDir = -1) { sprite_index = spr_player_spinL; }
    if (cont_spr_animationSpin = 0) { image_index = 0; cont_spr_animationSpin = 1; }
    image_speed = 0.2;
    spriteLoop = 1;
} else {
    cont_spr_animationSpin = 0; 
}
if (spr_animationSpin = 1) { timing_spr_animationSpin += (1/120) }
if (timing_spr_animationSpin &gt;= timeMax_spr_animationSpin) { spr_animationSpin = 0; timing_spr_animationSpin = 0;}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Climb 1/2 block

/*PAUSE GAME*/ if pause exit; /*END PAUSE GAME*/
catch_edge_first = 53;

if ( place_free(x+1*player_movDir, y-catch_edge_first) &amp;&amp; (!place_free(x+1*player_movDir, y-(catch_edge_first-1))) ) {
    if 
    ( (key_left) &amp;&amp; (key_sprint) &amp;&amp; (autoRise = 0) &amp;&amp; (playerHorizontal_dash = 0) )
    ||
    ( (key_right) &amp;&amp; (key_sprint) &amp;&amp; (autoRise = 0) &amp;&amp; (playerHorizontal_dash = 0) ) {
            climbBlock = 1;
    }
}

if (climbBlock = 1) {
    if (climbBlock = 1) &amp;&amp; place_free(x+2*player_movDir, y-(catch_edge_first-45)) &amp;&amp; (!place_free(x+1*player_movDir, y-((catch_edge_first-45)-1))) {
        end_jumpClimb = 1;
    } else {
        if end_jumpClimb = 0 {
            player_vsp = -0.4;
        }
    }
} else {
    end_jumpClimb = 0;
}

if (end_jumpClimb = 1) &amp;&amp; (climbBlock = 1) {
    player_vsp = -0.8;
}




/*
//sprite image 0
if (climbBlock = 1) &amp;&amp; place_free(x+1*player_movDir, y-35) &amp;&amp; (!place_free(x+1*player_movDir, 

y-(35-1))) {
    if (key_right) {
        sprite_index = spr_player_TreparBordeR;
        image_speed = 0;
        image_index = 0;
    }
    if (key_left) {
        sprite_index = spr_player_TreparBordeL;
        image_speed = 0;
        image_index = 0;
    }
}

// sprite image 1
if (climbBlock = 1) &amp;&amp; place_free(x+1*player_movDir, y-34) &amp;&amp; (!place_free(x+1*player_movDir, 

y-(34-1))) {
    if (key_right) {
        sprite_index = spr_player_TreparBordeR;
        image_speed = 0;
        image_index = 1;        
    }
    if (key_left) {
        sprite_index = spr_player_TreparBordeL;
        image_speed = 0;
        image_index = 1;
    }
}


// sprite image 2
if (climbBlock = 1) &amp;&amp; place_free(x+1*player_movDir, y-32) &amp;&amp; (!place_free(x+1*player_movDir, 

y-(32-1))) {        
    if (key_right) {
        sprite_index = spr_player_TreparBordeR;
        image_speed = 0;
        image_index = 2;
    }
    if (key_left) {
        sprite_index = spr_player_TreparBordeL;
        image_speed = 0;
        image_index = 2;
    }
}

*/
// sprite image 3
if (climbBlock = 1) &amp;&amp; place_free(x+2*player_movDir, y-catch_edge_first) &amp;&amp; (!place_free(x+1*player_movDir, y-(catch_edge_first-1))) {
    if (key_right) {
        sprite_index = spr_player_TreparBordeR;
        image_speed = 0;
        image_index = 3;
    }
    if (key_left) {
        sprite_index = spr_player_TreparBordeL;
        image_speed = 0;
        image_index = 3;
    }
}

// sprite image 4
if (climbBlock = 1) &amp;&amp; place_free(x+2*player_movDir, y-(catch_edge_first-1)) &amp;&amp; (!place_free(x+1*player_movDir, y-((catch_edge_first-1)-1))) {
    if (key_right) {
        sprite_index = spr_player_TreparBordeR;
        image_speed = 0;
        image_index = 4;
    }
    if (key_left) {
        sprite_index = spr_player_TreparBordeL;
        image_speed = 0;
        image_index = 4;
    }
}

// sprite image 5
if (climbBlock = 1) &amp;&amp; place_free(x+2*player_movDir, y-(catch_edge_first-2)) &amp;&amp; (!place_free(x+1*player_movDir, y-((catch_edge_first-2)-1))) {
    if (key_right) {
        sprite_index = spr_player_TreparBordeR;
        image_speed = 0;
        image_index = 5;
    }
    if (key_left) {
        sprite_index = spr_player_TreparBordeL;
        image_speed = 0;
        image_index = 5;
    }
}

// sprite image 6
if (climbBlock = 1) &amp;&amp; place_free(x+2*player_movDir, y-(catch_edge_first-3)) &amp;&amp; (!place_free(x+1*player_movDir, y-((catch_edge_first-3)-1))) {
    if (key_right) {
        sprite_index = spr_player_TreparBordeR;
        image_speed = 0;
        image_index = 6;
    }
    if (key_left) {
        sprite_index = spr_player_TreparBordeL;
        image_speed = 0;
        image_index = 6;
    }
}

// sprite image 7
if (climbBlock = 1) &amp;&amp; place_free(x+2*player_movDir, y-(catch_edge_first-4)) &amp;&amp; (!place_free(x+1*player_movDir, y-((catch_edge_first-4)-1))) {
    if (key_right) {
        sprite_index = spr_player_TreparBordeR;
        image_speed = 0;
        image_index = 7;
    }
    if (key_left) {
        sprite_index = spr_player_TreparBordeL;
        image_speed = 0;
        image_index = 7;
    }
}

// sprite image 8
if (climbBlock = 1) &amp;&amp; place_free(x+2*player_movDir, y-(catch_edge_first-6)) &amp;&amp; (!place_free(x+1*player_movDir, y-((catch_edge_first-6)-1))) {
    if (key_right) {
        sprite_index = spr_player_TreparBordeR;
        image_speed = 0;
        image_index = 8;
    }
    if (key_left) {
        sprite_index = spr_player_TreparBordeL;
        image_speed = 0;
        image_index = 8;
    }
}

// sprite image 9
if (climbBlock = 1) &amp;&amp; place_free(x+2*player_movDir, y-(catch_edge_first-16)) &amp;&amp; (!place_free(x+1*player_movDir, y-((catch_edge_first-16)-1))) {
    if (key_right) {
        sprite_index = spr_player_TreparBordeR;
        image_speed = 0;
        image_index = 9;
    }
    if (key_left) {
        sprite_index = spr_player_TreparBordeL;
        image_speed = 0;
        image_index = 9;
    }
}

// sprite image 10
if (climbBlock = 1) &amp;&amp; place_free(x+2*player_movDir, y-(catch_edge_first-20)) &amp;&amp; (!place_free(x+1*player_movDir, y-((catch_edge_first-20)-1))) {
    if (key_right) {
        sprite_index = spr_player_TreparBordeR;
        image_speed = 0;
        image_index = 10;
    }
    if (key_left) {
        sprite_index = spr_player_TreparBordeL;
        image_speed = 0;
        image_index = 10;
    }
}

// sprite image 11
if (climbBlock = 1) &amp;&amp; place_free(x+2*player_movDir, y-(catch_edge_first-25)) &amp;&amp; (!place_free(x+1*player_movDir, y-((catch_edge_first-25)-1))) {
    if (key_right) {
        sprite_index = spr_player_TreparBordeR;
        image_speed = 0;
        image_index = 11;
    }
    if (key_left) {
        sprite_index = spr_player_TreparBordeL;
        image_speed = 0;
        image_index = 11;
    }
}

// sprite image 12 //Last frame climbing
if (climbBlock = 1) &amp;&amp; place_free(x+2*player_movDir, y-(catch_edge_first-30)) &amp;&amp; (!place_free(x+1*player_movDir, y-((catch_edge_first-30)-1))) {
    if (key_right) {
        sprite_index = spr_player_TreparBordeR;
        image_speed = 0;
        image_index = 12;
    }
    if (key_left) {
        sprite_index = spr_player_TreparBordeL;
        image_speed = 0;
        image_index = 12;
    }
}

// sprite image 13
if (climbBlock = 1) &amp;&amp; place_free(x+2*player_movDir, y-(catch_edge_first-49)) &amp;&amp; (!place_free(x+1*player_movDir, y-((catch_edge_first-49)-1))) {
    if (key_right) {
        sprite_index = spr_player_TreparBordeR;
        image_speed = 0;
        image_index = 13;
    }
    if (key_left) {
        sprite_index = spr_player_TreparBordeL;
        image_speed = 0;
        image_index = 13;
    }
}

// sprite image 14
if (climbBlock = 1) &amp;&amp; place_free(x+2*player_movDir, y-(catch_edge_first-50)) &amp;&amp; (!place_free(x+1*player_movDir, y-((catch_edge_first-50)-1))) {
    if (key_right) {
        sprite_index = spr_player_TreparBordeR;
        image_speed = 0;
        image_index = 14;
    }
    if (key_left) {
        sprite_index = spr_player_TreparBordeL;
        image_speed = 0;
        image_index = 14;
    }
}

// sprite image 15
if (climbBlock = 1) &amp;&amp; place_free(x+2*player_movDir, y-(catch_edge_first-51)) &amp;&amp; (!place_free(x+1*player_movDir, y-((catch_edge_first-51)-1))) {
    if (key_right) {
        sprite_index = spr_player_TreparBordeR;
        image_speed = 0;
        image_index = 15;
    }
    if (key_left) {
        sprite_index = spr_player_TreparBordeL;
        image_speed = 0;
        image_index = 15;
    }
}

// sprite image 16
if (climbBlock = 1) &amp;&amp; place_free(x+2*player_movDir, y+(catch_edge_first-52)) &amp;&amp; (!place_free(x+1*player_movDir, y-((catch_edge_first-52)-1))) {
    if (key_right) {
        sprite_index = spr_player_TreparBordeR;
        image_speed = 0;
        image_index = 16;
    }
    if (key_left) {
        sprite_index = spr_player_TreparBordeL;
        image_speed = 0;
        image_index = 16;
    }
}







//END CLIMB
if (place_free(x+1*player_movDir, y)) || (!key_sprint) {
    climbBlock = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Auto rise 

/*PAUSE GAME*/ if pause exit; /*END PAUSE GAME*/

if ( (!place_free(x+(player_hsp*2*abs(player_movDir)),y)) &amp;&amp; (place_free(x+(player_hsp*2*abs(player_movDir)), y-check_rise)) )
{
    y -= 1
    autoRise = 1;
} else {
    autoRise = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Combat mode

/*PAUSE GAME*/ if pause exit; /*END PAUSE GAME*/

/// Basic attack
 if (keyboard_check_pressed(basAtt_Key)) &amp;&amp; (playerStamina &gt;= staminaBasicAttack) &amp;&amp; (playerStuned = 0) &amp;&amp; (playerHorizontal_dash = 0) &amp;&amp; (playerVertical_dash = 0) &amp;&amp; (playerBasicAttackCD &lt;= 0) &amp;&amp; (playerSpin = 0) { 
    playerBasicAttack = 1; 
    wasteStaminaBasAtt = 1;
 } else { 
    playerBasicAttack = 0; 
 }
 if (playerBasicAttack = 1) {  
    spr_animationBasicAttack = 1; 
    playerBasicAttackCD = BasicAttackCD;    
 }
 if (spr_animationBasicAttack = 1) &amp;&amp; (place_free(x,y+1)) { player_vsp = player_vsp/2; player_hsp = player_hsp/2; }
 
 if (playerBasicAttack = 0) &amp;&amp; (playerBasicAttackCD &gt; 0) {
    playerBasicAttackCD -= 1/120;
 }
 if wasteStaminaBasAtt = 1 {
    playerStamina -= staminaBasicAttack;
    wasteStaminaBasAtt = 0;
 }
 
 
/// Spin
if (keyboard_check_pressed(spin_Key)) &amp;&amp; (playerStamina &gt;= staminaSpin) &amp;&amp; (playerStuned = 0) &amp;&amp; (playerHorizontal_dash = 0) &amp;&amp; (playerVertical_dash = 0) &amp;&amp; (playerSpinCD &lt;= 0) &amp;&amp; (playerBasicAttack = 0) { 
    playerSpin = 1;
    wasteStaminaSpin = 1;
}

if playerSpin = 1 {
    spr_animationSpin = 1; 
    playerSpinCD = SpinCD;      
    timeSpin += 1/120;
    if timeSpin &gt;= LongSpin { playerSpin = 0; timeSpin = 0;}
}

 if (spr_animationSpin = 1) { player_vsp = player_vsp/2; player_hsp = player_hsp/2; }

    //cd
 if (playerSpin = 0) &amp;&amp; (playerSpinCD &gt; 0) {
    playerSpinCD -= 1/120;
 }

if wasteStaminaSpin = 1 {
    playerStamina -= staminaSpin;
    wasteStaminaSpin = 0;    
}
 
/// Vertical Dash
 if (keyboard_check_pressed(vDash_Key)) &amp;&amp; (playerStamina &gt;= staminaVDash) &amp;&amp; (playerStuned = 0) &amp;&amp; (place_free(x,y+1)) &amp;&amp; (playerVertical_dashCD &lt;= 0) &amp;&amp;(!collision_line(x, y, x, y+20, obj_solid, true, true)) &amp;&amp; (climbBlock = 0) &amp;&amp; (nextToWallSliding = 0) &amp;&amp; (playerHorizontal_dash = 0) &amp;&amp; (playerSpin = 0) 
  { 
    playerVertical_dash = 1;
    wasteStaminaVDash = 1;
  }
 if (!place_free(x,y+1)) { playerVertical_dash = 0; }
 if (playerVertical_dash = 1) { 
    Check_collisionVDash = 1; 
    global.player_hsp = 0;
    global.player_vsp += vspVerticalDash;
    playerVertical_dashCD = VerticalDashCD;
 }
 if (Check_collisionVDash = 1) &amp;&amp; (!place_free (x,y+1)) { playerCollisionVDash = 1; } else { playerCollisionVDash = 0; }
 if (playerCollisionVDash = 1) &amp;&amp; (Check_collisionVDash = 1) { Check_collisionVDash = 0; }

if (playerVertical_dash = 0) &amp;&amp; (playerVertical_dashCD &gt; 0) {
    playerVertical_dashCD -= 1/120;
}
 if wasteStaminaVDash = 1 {
    playerStamina -= staminaVDash;
    wasteStaminaVDash = 0;
 }
 
/// Horizontal Dash
if (keyboard_check_pressed(hDash_Key)) &amp;&amp; (playerStamina &gt;= staminaHDash) &amp;&amp; (playerStuned = 0) &amp;&amp; (HorDashTimer = 0) &amp;&amp; (playerHorizontal_dashCD &lt;= 0) &amp;&amp; (playerSpin = 0){ 
    playerHorizontal_dash = 1; 
    save1 = maxSpeed; 
    wasteStaminaHDash = 1;
}
if ( playerHorizontal_dash = 1 ) { 
    playerHorizontal_dashCD = HorizontalDashCD;
    HorDashTimer += (1/120); 
    maxSpeed = save1 + horDashExtraVel;
    if player_viewDir = 1 { key_right = 1; }
    if player_viewDir = -1 { key_left = 1; }
}

if (playerHorizontal_dash = 0) &amp;&amp; (playerHorizontal_dashCD &gt; 0) {
    playerHorizontal_dashCD -= 1/120;
}

if (HorDashTimer &gt; timeHorDash) {
    playerHorizontal_dash = 0;  
    if (maxSpeed &gt; save1) { maxSpeed -= acceleration; }
    if (maxSpeed &lt;= save1) { HorDashTimer = 0; maxSpeed = save1}
}
 if wasteStaminaHDash = 1 {
    playerStamina -= staminaHDash;
    wasteStaminaHDash = 0;
 }

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Block Movment after ard fall

/*PAUSE GAME*/ if pause exit; /*END PAUSE GAME*/

//// After hard fall
if (spr_contactHard = 1)
 {
    cont_contactHard = stun_contactHard;
 }
if ((cont_contactHard &gt; 0.0) &amp;&amp; (!place_free(x,y+1)))
 {
    cont_contactHard -= (1/120);
    playerStuned = 1;
    if (cont_contactHard &lt; 0.2) &amp;&amp; (cont_contactHard &gt; 0.0)
     {
        if (player_viewDir = 1) { sprite_index = spr_player_WakeUpAfterContactFlorHardR; }
        if (player_viewDir = -1) { sprite_index = spr_player_WakeUpAfterContactFlorHardL; }   
        if (cont_spr_WakeUpAfterContactFlorHard = 0) { image_index = 0; cont_spr_WakeUpAfterContactFlorHard = 1; }
        spr_WakeUpAfterContactFlorHard = 1; 
        image_speed = 0.1;
        spriteLoop = 0;
     }else{ 
        spr_WakeUpAfterContactFlorHard = 0;  
        cont_spr_WakeUpAfterContactFlorHard = 0; 
     }   
 }
 
 /// After VDash
if (Check_collisionVDash = 1)
 {
    cont_vDash = stun_contactvDash;
 }
if ((cont_vDash &gt; 0.0) &amp;&amp; (!place_free(x,y+1)))
 {
    cont_vDash -= (1/120);
    playerStuned = 1;
    if (cont_vDash &lt; 0.2) &amp;&amp; (cont_vDash &gt; 0.0)
     {
        if (player_viewDir = 1) { sprite_index = spr_player_WakeUpAfterContactFlorHardR; }
        if (player_viewDir = -1) { sprite_index = spr_player_WakeUpAfterContactFlorHardL; }   
        if (cont_spr_WakeUpAfterContactFlorHard = 0) { image_index = 0; cont_spr_WakeUpAfterContactFlorHard = 1; }
        spr_WakeUpAfterContactFlorHard = 1; 
        image_speed = 0.1;
        spriteLoop = 0;
     }else{ 
        spr_WakeUpAfterContactFlorHard = 0;  
        cont_spr_WakeUpAfterContactFlorHard = 0; 
     }   
 } 
 
if ((cont_contactHard &gt; 0.0) &amp;&amp; (!place_free(x,y+1))) || ((cont_vDash &gt; 0.0) &amp;&amp; (!place_free(x,y+1))) { } else {
    playerStuned = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// heal &amp; stamina

/*PAUSE GAME*/ if pause exit; /*END PAUSE GAME*/

//HP
if playerAttacked = 1 {
    timingRegenHP = 0;
    playerAttacked = 0;
}

if (timingRegenHP &lt;= playerNoBattle) {
    timingRegenHP += 1/120;
}

if (timingRegenHP &gt;= playerNoBattle) {
    if (playerHeal &lt; playerMaxHeal) {
        if (regenHPacc &lt; regenHPs/120) { regenHPacc += accelerationRegenHP; }
        playerHeal += regenHPacc;
    }
    
    if (playerHeal &gt; playerMaxHeal) {
        playerHeal = playerMaxHeal;
        regenHPacc = 0;
    }
}

if playerHeal &lt;= 0 {
    room_restart();
    playerHeal = 1;
}


//ST
    if (playerStamina &lt; playerMaxStamina) {
        if (regenSTacc &lt; regenSTs) { regenSTacc += accelerationRegenST; }
        playerStamina += regenSTacc;
    }
    
    if (playerStamina &gt; playerMaxStamina) {
        playerStamina = playerMaxStamina;
        regenSTacc = 0;
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Stun

/*PAUSE GAME*/ if pause exit; /*END PAUSE GAME*/

if playerStuned = 1 {
    player_hsp = 0;
    player_vsp = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Particles

/*PAUSE GAME*/ if pause exit; /*END PAUSE GAME*/

if (sprite_index = spr_player_sprintR) || (sprite_index = spr_player_sprintL){
    timeParSprint += 1/120;
    if timeParSprint &gt;= 0.1 {    
        if player_movDir = 1 {
            if parSprrint = 1 {
                part_particles_create(ps,x-17,y,dustWalkL,1)
            } else {
                part_particles_create(ps,x+13,y,dustWalkL,1)
            }
        }
        if player_movDir = -1 {
            if parSprrint = -1 {
                part_particles_create(ps,x+10,y,dustWalkR,1)
            } else {
                part_particles_create(ps,x-5,y,dustWalkR,1)
            }
        }
        if timeParSprint &gt;= 0.2 {
            if parSprrint = 1 { parSprrint = -1 } else { parSprrint = 1; }
            timeParSprint = 0;    
        }
    }
}
    
    
if keyboard_check(vk_numpad2) {
    if player_movDir = 1 {
        part_particles_create(ps,x-20,y,dustWalkL,5)
    }
    if player_movDir = -1 {
        part_particles_create(ps,x+10,y,dustWalkR,5)
    }
}

if keyboard_check(vk_numpad0) {
    part_particles_create(ps,mouse_x,mouse_y,test1,1)
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Lvl &amp;&amp; EXP

/*PAUSE GAME*/ if pause exit; /*END PAUSE GAME*/

if playerEXP &gt;= playerEXPnextLvL {
    playerLvL += 1;
    playerEXP -= playerEXPnextLvL;
    playerPH += 2;
    playerEXPnextLvL = playerEXPnextLvL + playerEXPaddNewLvL;
    animationNextLvL = 1;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///View follow player

/* FOLLOW AT INSTANT THE PLAYER
view_xview[view_current] = obj_player.x - (view_wview[view_current]/2);
*/ 


//-------------------------//


/* SCROLL WHEN PLAYER GO OUT
hVelMovView = 20; //Value of the vertical velodity of the view

if (360 - obj_player.y + view_yview[view_current]) &lt; 0 {
    moveView = 1
}

if 360 - obj_player.y &gt; 0 {
    moveView = -1
}

if moveView = -1 {
    view_yview[view_current] -= hVelMovView;
    if (360 - obj_player.y + view_yview[view_current]) &gt; 0 {
        moveView = 0;
    }
}

if moveView = 1 {
    view_yview[view_current] += hVelMovView;
    if 360 - obj_player.y &gt; 0 {
        moveView = 0;
    }
}
*/


//-------------------------//



if (360 - obj_player.y + view_yview[view_current]) &lt; 0 {
    view_yview[view_current] += 360;
}

if 360 - obj_player.y &gt; 0 {
    view_yview[view_current] -= 360;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,16</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
