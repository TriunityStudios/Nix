<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-99</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Constants
showInfoSettings = false; //Show ot not the information
globalvar FPS; FPS = 0; // Current FPS
timeReloadFPS = 0; // timing to reload the var "FPS"

//Variables
maxTimeReloadFPS = 0.15; // Seconds to reload the "FPS" indicator and variable


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Information
x = 0;
y = 0;

if (global.showInfoSett = 0) {
    instance_destroy() ;
}

//Configuration
draw_set_alpha(0.7);
draw_set_color(c_gray);
draw_set_font(fnt_default12);
draw_set_halign(fa_right);
draw_set_valign(fa_top)

// GameVersion
draw_set_color(c_white)
draw_text(
    x+ (view_xview[view_current] + (view_wview[0]-2)*wgui_scale),
    y+ ((view_yview[view_current] + 1)*hgui_scale),
    string(gameVersion)
);
draw_set_color(c_gray)

// FPS and room vel
draw_text(
    x+ (view_xview[view_current] + (view_wview[0]-2)*wgui_scale),
    y+ ((view_yview[view_current] + 16)*hgui_scale),
    "Room vel: " + string(room_speed) 
    + "#FPS = " + string(round(global.FPS))
);

// Window resolution and Fullscreen
draw_text(
    x+ (view_xview[view_current] + (view_wview[0]-2)*wgui_scale),
    y+ ((view_yview[view_current] + 25)*hgui_scale),
    "#Window resolution = " + string(window_get_width()) +  " x " + string(window_get_height())
    );

if window_get_fullscreen() {
    draw_text(
        x+ (view_xview[view_current] + (view_wview[0]-2)*wgui_scale),
        y+ ((view_yview[view_current] + 45)*hgui_scale), 
        "Fullscreen is ON");
} else {
    draw_text(
        x+ (view_xview[view_current] + (view_wview[0]-2)*wgui_scale),
        y+ ((view_yview[view_current] + 45)*hgui_scale), 
        "Fullscreen is OFF");
}

// Coordenates view
draw_text(
    x+ (view_xview[view_current] + (view_wview[0]-2)*wgui_scale),
    y+ ((view_yview[view_current]+55)*hgui_scale),
    "View position: (" + string(view_xview) + ", " + string(-view_yview) + ")"
);


// Objects on screen
draw_text(
    x+ (view_xview[view_current] + (view_wview[0]-2)*wgui_scale),
    y+ ((view_yview[view_current] + 75)*hgui_scale),
    "Total instances: " + string(instance_count)
);



//Info player
if instance_exists(obj_player) { 
    draw_text(
        x+ (view_xview[view_current] + (view_wview[0]-2)*wgui_scale),
        y+ ((view_yview[view_current]+95)*hgui_scale),
        "Player position: (" + string(obj_player.x) + ", " + string(-obj_player.y) + ")
        Player movDir: " + string(player_movDir) + "
        Player viewDir: " + string(player_viewDir)
    );
}

// Angle Player and cursor
if instance_exists(obj_cursor) &amp;&amp; instance_exists(obj_player) {
    draw_text(     
        x+ (view_xview[view_current] + (view_wview[0]-2)*wgui_scale),
        y+ ((view_yview[view_current] + 135)*hgui_scale),
        "Mouse x: " + string(mouse_x-view_xview) + "  y: " + string(mouse_y) + "
        Mouse angle with player: " + string(global.angleWcursor)
    );    
}

//Language
    draw_text(     
        x + (view_xview[view_current] + (view_wview[0]-2)*wgui_scale),
        y + ((view_yview[view_current] + 175)*hgui_scale),
        "Language: " + string(lang) +
        "#File language: " + "'lang/"+string(lang)+".lang'"
    );  


// Tests ----------------------------

/*
    draw_text(     
        x + (view_xview[view_current] + (view_wview[0]-2)*wgui_scale),
        y + ((view_yview[view_current] + 200)*hgui_scale),
        "Language: " + string(lang) +
        "#readLang: " + string(readLang) +
        "#File search: " + "'lang"+string(lang)+".lang'"
    );    

*/
    
// ------------------------- /Tests

// Controls velocity and profile info
if global.saveNum != 0 {
draw_text(
    x+ (view_xview[view_current] + window_get_width() - 10),
    y+ (view_yview[view_current] + window_get_height() - 190),
    "INCREASE VELOCITY: F8
    DECREASE VELOCITY: F7
    #SAVENUM: " + string(saveNum) + "
    NameProfile: " + string(NameProfile) + "
    configStatsBar: " + string(configStatsBar) + "
    configStatsInfo: " + string(configStatsInfo) + "
    configCDbar: " + string(configCDbar)
);
} else {
draw_text(
    x+ (view_xview[view_current] + window_get_width() - 10),
    y+ (view_yview[view_current] + window_get_height() - 190),
    "INCREASE VELOCITY: F8
    DECREASE VELOCITY: F7"
);
}

draw_set_valign(fa_bottom);
draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///FPS control
timeReloadFPS += 1/room_speed; //THIS ONE IS "1/room_speed", not "1/120"

if (timeReloadFPS &gt;= maxTimeReloadFPS)
{
    global.FPS = fps_real;
    timeReloadFPS = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Room Speed control
up_time = keyboard_check_pressed(vk_f8);
down_time = keyboard_check_pressed(vk_f7);
down_time_constant = keyboard_check(vk_f7);

if (up_time)
{
    room_speed += 10;
}

if (down_time) &amp;&amp; (room_speed &gt;= 20)
{
    room_speed -= 10;
}

if (room_speed &gt; 250) &amp;&amp; (!down_time_constant) { room_speed = 250; }
if (room_speed &lt; 20) &amp;&amp; (!down_time_constant) { room_speed = 20; }
if (room_speed &lt; 20) &amp;&amp; (down_time_constant) { room_speed = 5; }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Game Resolution
draw_set_alpha(0.7);
draw_set_color(c_gray);
draw_set_font(fnt_default6);
draw_set_halign(fa_left);
draw_text(
    x+ (view_xview[view_current] + 3),
    y+ (view_yview[view_current] + 40),
    "Game resolution: " + string(view_wview[view_current]) + " x " + string(view_hview[view_current])
);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
